// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package testpb

import (
	binary "encoding/binary"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	math "math"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.Map = (*_ABitOfEverything_3_map)(nil)

type _ABitOfEverything_3_map struct {
	m *map[string]string
}

func (x *_ABitOfEverything_3_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_ABitOfEverything_3_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_ABitOfEverything_3_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_ABitOfEverything_3_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_ABitOfEverything_3_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_ABitOfEverything_3_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_ABitOfEverything_3_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_ABitOfEverything_3_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ABitOfEverything_3_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_ABitOfEverything_4_map)(nil)

type _ABitOfEverything_4_map struct {
	m *map[int32]string
}

func (x *_ABitOfEverything_4_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_ABitOfEverything_4_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfInt32(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_ABitOfEverything_4_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Int()
	concreteValue := (int32)(keyUnwrapped)
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_ABitOfEverything_4_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Int()
	concreteKey := (int32)(keyUnwrapped)
	delete(*x.m, concreteKey)
}

func (x *_ABitOfEverything_4_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Int()
	concreteKey := (int32)(keyUnwrapped)
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_ABitOfEverything_4_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Int()
	concreteKey := (int32)(keyUnwrapped)
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_ABitOfEverything_4_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_ABitOfEverything_4_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ABitOfEverything_4_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_ABitOfEverything_5_map)(nil)

type _ABitOfEverything_5_map struct {
	m *map[bool]string
}

func (x *_ABitOfEverything_5_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_ABitOfEverything_5_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfBool(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_ABitOfEverything_5_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Bool()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_ABitOfEverything_5_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Bool()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_ABitOfEverything_5_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Bool()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_ABitOfEverything_5_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Bool()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_ABitOfEverything_5_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_ABitOfEverything_5_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ABitOfEverything_5_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.List = (*_ABitOfEverything_6_list)(nil)

type _ABitOfEverything_6_list struct {
	list *[]int32
}

func (x *_ABitOfEverything_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ABitOfEverything_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt32((*x.list)[i])
}

func (x *_ABitOfEverything_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := (int32)(valueUnwrapped)
	(*x.list)[i] = concreteValue
}

func (x *_ABitOfEverything_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := (int32)(valueUnwrapped)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ABitOfEverything_6_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ABitOfEverything at list field Repeated as it is not of Message kind"))
}

func (x *_ABitOfEverything_6_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ABitOfEverything_6_list) NewElement() protoreflect.Value {
	v := int32(0)
	return protoreflect.ValueOfInt32(v)
}

func (x *_ABitOfEverything_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ABitOfEverything              protoreflect.MessageDescriptor
	fd_ABitOfEverything_message      protoreflect.FieldDescriptor
	fd_ABitOfEverything_enum         protoreflect.FieldDescriptor
	fd_ABitOfEverything_str_map      protoreflect.FieldDescriptor
	fd_ABitOfEverything_int32_map    protoreflect.FieldDescriptor
	fd_ABitOfEverything_bool_map     protoreflect.FieldDescriptor
	fd_ABitOfEverything_repeated     protoreflect.FieldDescriptor
	fd_ABitOfEverything_string       protoreflect.FieldDescriptor
	fd_ABitOfEverything_bool         protoreflect.FieldDescriptor
	fd_ABitOfEverything_bytes        protoreflect.FieldDescriptor
	fd_ABitOfEverything_i32          protoreflect.FieldDescriptor
	fd_ABitOfEverything_f32          protoreflect.FieldDescriptor
	fd_ABitOfEverything_u32          protoreflect.FieldDescriptor
	fd_ABitOfEverything_si32         protoreflect.FieldDescriptor
	fd_ABitOfEverything_sf32         protoreflect.FieldDescriptor
	fd_ABitOfEverything_i64          protoreflect.FieldDescriptor
	fd_ABitOfEverything_f64          protoreflect.FieldDescriptor
	fd_ABitOfEverything_u64          protoreflect.FieldDescriptor
	fd_ABitOfEverything_si64         protoreflect.FieldDescriptor
	fd_ABitOfEverything_sf64         protoreflect.FieldDescriptor
	fd_ABitOfEverything_float        protoreflect.FieldDescriptor
	fd_ABitOfEverything_double       protoreflect.FieldDescriptor
	fd_ABitOfEverything_any          protoreflect.FieldDescriptor
	fd_ABitOfEverything_timestamp    protoreflect.FieldDescriptor
	fd_ABitOfEverything_duration     protoreflect.FieldDescriptor
	fd_ABitOfEverything_struct       protoreflect.FieldDescriptor
	fd_ABitOfEverything_bool_value   protoreflect.FieldDescriptor
	fd_ABitOfEverything_bytes_value  protoreflect.FieldDescriptor
	fd_ABitOfEverything_double_value protoreflect.FieldDescriptor
	fd_ABitOfEverything_float_value  protoreflect.FieldDescriptor
	fd_ABitOfEverything_int32_value  protoreflect.FieldDescriptor
	fd_ABitOfEverything_int64_value  protoreflect.FieldDescriptor
	fd_ABitOfEverything_string_value protoreflect.FieldDescriptor
	fd_ABitOfEverything_uint32_value protoreflect.FieldDescriptor
	fd_ABitOfEverything_uint64_value protoreflect.FieldDescriptor
	fd_ABitOfEverything_field_mask   protoreflect.FieldDescriptor
	fd_ABitOfEverything_list_value   protoreflect.FieldDescriptor
	fd_ABitOfEverything_value        protoreflect.FieldDescriptor
	fd_ABitOfEverything_null_value   protoreflect.FieldDescriptor
	fd_ABitOfEverything_empty        protoreflect.FieldDescriptor
)

func init() {
	file_testpb_test_proto_init()
	md_ABitOfEverything = File_testpb_test_proto.Messages().ByName("ABitOfEverything")
	fd_ABitOfEverything_message = md_ABitOfEverything.Fields().ByName("message")
	fd_ABitOfEverything_enum = md_ABitOfEverything.Fields().ByName("enum")
	fd_ABitOfEverything_str_map = md_ABitOfEverything.Fields().ByName("str_map")
	fd_ABitOfEverything_int32_map = md_ABitOfEverything.Fields().ByName("int32_map")
	fd_ABitOfEverything_bool_map = md_ABitOfEverything.Fields().ByName("bool_map")
	fd_ABitOfEverything_repeated = md_ABitOfEverything.Fields().ByName("repeated")
	fd_ABitOfEverything_string = md_ABitOfEverything.Fields().ByName("string")
	fd_ABitOfEverything_bool = md_ABitOfEverything.Fields().ByName("bool")
	fd_ABitOfEverything_bytes = md_ABitOfEverything.Fields().ByName("bytes")
	fd_ABitOfEverything_i32 = md_ABitOfEverything.Fields().ByName("i32")
	fd_ABitOfEverything_f32 = md_ABitOfEverything.Fields().ByName("f32")
	fd_ABitOfEverything_u32 = md_ABitOfEverything.Fields().ByName("u32")
	fd_ABitOfEverything_si32 = md_ABitOfEverything.Fields().ByName("si32")
	fd_ABitOfEverything_sf32 = md_ABitOfEverything.Fields().ByName("sf32")
	fd_ABitOfEverything_i64 = md_ABitOfEverything.Fields().ByName("i64")
	fd_ABitOfEverything_f64 = md_ABitOfEverything.Fields().ByName("f64")
	fd_ABitOfEverything_u64 = md_ABitOfEverything.Fields().ByName("u64")
	fd_ABitOfEverything_si64 = md_ABitOfEverything.Fields().ByName("si64")
	fd_ABitOfEverything_sf64 = md_ABitOfEverything.Fields().ByName("sf64")
	fd_ABitOfEverything_float = md_ABitOfEverything.Fields().ByName("float")
	fd_ABitOfEverything_double = md_ABitOfEverything.Fields().ByName("double")
	fd_ABitOfEverything_any = md_ABitOfEverything.Fields().ByName("any")
	fd_ABitOfEverything_timestamp = md_ABitOfEverything.Fields().ByName("timestamp")
	fd_ABitOfEverything_duration = md_ABitOfEverything.Fields().ByName("duration")
	fd_ABitOfEverything_struct = md_ABitOfEverything.Fields().ByName("struct")
	fd_ABitOfEverything_bool_value = md_ABitOfEverything.Fields().ByName("bool_value")
	fd_ABitOfEverything_bytes_value = md_ABitOfEverything.Fields().ByName("bytes_value")
	fd_ABitOfEverything_double_value = md_ABitOfEverything.Fields().ByName("double_value")
	fd_ABitOfEverything_float_value = md_ABitOfEverything.Fields().ByName("float_value")
	fd_ABitOfEverything_int32_value = md_ABitOfEverything.Fields().ByName("int32_value")
	fd_ABitOfEverything_int64_value = md_ABitOfEverything.Fields().ByName("int64_value")
	fd_ABitOfEverything_string_value = md_ABitOfEverything.Fields().ByName("string_value")
	fd_ABitOfEverything_uint32_value = md_ABitOfEverything.Fields().ByName("uint32_value")
	fd_ABitOfEverything_uint64_value = md_ABitOfEverything.Fields().ByName("uint64_value")
	fd_ABitOfEverything_field_mask = md_ABitOfEverything.Fields().ByName("field_mask")
	fd_ABitOfEverything_list_value = md_ABitOfEverything.Fields().ByName("list_value")
	fd_ABitOfEverything_value = md_ABitOfEverything.Fields().ByName("value")
	fd_ABitOfEverything_null_value = md_ABitOfEverything.Fields().ByName("null_value")
	fd_ABitOfEverything_empty = md_ABitOfEverything.Fields().ByName("empty")
}

var _ protoreflect.Message = (*fastReflection_ABitOfEverything)(nil)

type fastReflection_ABitOfEverything ABitOfEverything

func (x *ABitOfEverything) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ABitOfEverything)(x)
}

func (x *ABitOfEverything) slowProtoReflect() protoreflect.Message {
	mi := &file_testpb_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ABitOfEverything_messageType fastReflection_ABitOfEverything_messageType
var _ protoreflect.MessageType = fastReflection_ABitOfEverything_messageType{}

type fastReflection_ABitOfEverything_messageType struct{}

func (x fastReflection_ABitOfEverything_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ABitOfEverything)(nil)
}
func (x fastReflection_ABitOfEverything_messageType) New() protoreflect.Message {
	return new(fastReflection_ABitOfEverything)
}
func (x fastReflection_ABitOfEverything_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ABitOfEverything
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ABitOfEverything) Descriptor() protoreflect.MessageDescriptor {
	return md_ABitOfEverything
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ABitOfEverything) Type() protoreflect.MessageType {
	return _fastReflection_ABitOfEverything_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ABitOfEverything) New() protoreflect.Message {
	return new(fastReflection_ABitOfEverything)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ABitOfEverything) Interface() protoreflect.ProtoMessage {
	return (*ABitOfEverything)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ABitOfEverything) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Message != nil {
		value := protoreflect.ValueOfMessage(x.Message.ProtoReflect())
		if !f(fd_ABitOfEverything_message, value) {
			return
		}
	}
	if x.Enum != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Enum))
		if !f(fd_ABitOfEverything_enum, value) {
			return
		}
	}
	if len(x.StrMap) != 0 {
		value := protoreflect.ValueOfMap(&_ABitOfEverything_3_map{m: &x.StrMap})
		if !f(fd_ABitOfEverything_str_map, value) {
			return
		}
	}
	if len(x.Int32Map) != 0 {
		value := protoreflect.ValueOfMap(&_ABitOfEverything_4_map{m: &x.Int32Map})
		if !f(fd_ABitOfEverything_int32_map, value) {
			return
		}
	}
	if len(x.BoolMap) != 0 {
		value := protoreflect.ValueOfMap(&_ABitOfEverything_5_map{m: &x.BoolMap})
		if !f(fd_ABitOfEverything_bool_map, value) {
			return
		}
	}
	if len(x.Repeated) != 0 {
		value := protoreflect.ValueOfList(&_ABitOfEverything_6_list{list: &x.Repeated})
		if !f(fd_ABitOfEverything_repeated, value) {
			return
		}
	}
	if x.String_ != "" {
		value := protoreflect.ValueOfString(x.String_)
		if !f(fd_ABitOfEverything_string, value) {
			return
		}
	}
	if x.Bool != false {
		value := protoreflect.ValueOfBool(x.Bool)
		if !f(fd_ABitOfEverything_bool, value) {
			return
		}
	}
	if len(x.Bytes) != 0 {
		value := protoreflect.ValueOfBytes(x.Bytes)
		if !f(fd_ABitOfEverything_bytes, value) {
			return
		}
	}
	if x.I32 != int32(0) {
		value := protoreflect.ValueOfInt32(x.I32)
		if !f(fd_ABitOfEverything_i32, value) {
			return
		}
	}
	if x.F32 != uint32(0) {
		value := protoreflect.ValueOfUint32(x.F32)
		if !f(fd_ABitOfEverything_f32, value) {
			return
		}
	}
	if x.U32 != uint32(0) {
		value := protoreflect.ValueOfUint32(x.U32)
		if !f(fd_ABitOfEverything_u32, value) {
			return
		}
	}
	if x.Si32 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Si32)
		if !f(fd_ABitOfEverything_si32, value) {
			return
		}
	}
	if x.Sf32 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Sf32)
		if !f(fd_ABitOfEverything_sf32, value) {
			return
		}
	}
	if x.I64 != int64(0) {
		value := protoreflect.ValueOfInt64(x.I64)
		if !f(fd_ABitOfEverything_i64, value) {
			return
		}
	}
	if x.F64 != uint64(0) {
		value := protoreflect.ValueOfUint64(x.F64)
		if !f(fd_ABitOfEverything_f64, value) {
			return
		}
	}
	if x.U64 != uint64(0) {
		value := protoreflect.ValueOfUint64(x.U64)
		if !f(fd_ABitOfEverything_u64, value) {
			return
		}
	}
	if x.Si64 != int64(0) {
		value := protoreflect.ValueOfInt64(x.Si64)
		if !f(fd_ABitOfEverything_si64, value) {
			return
		}
	}
	if x.Sf64 != int64(0) {
		value := protoreflect.ValueOfInt64(x.Sf64)
		if !f(fd_ABitOfEverything_sf64, value) {
			return
		}
	}
	if x.Float != float32(0) || math.Signbit(float64(x.Float)) {
		value := protoreflect.ValueOfFloat32(x.Float)
		if !f(fd_ABitOfEverything_float, value) {
			return
		}
	}
	if x.Double != float64(0) || math.Signbit(x.Double) {
		value := protoreflect.ValueOfFloat64(x.Double)
		if !f(fd_ABitOfEverything_double, value) {
			return
		}
	}
	if x.Any != nil {
		value := protoreflect.ValueOfMessage(x.Any.ProtoReflect())
		if !f(fd_ABitOfEverything_any, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_ABitOfEverything_timestamp, value) {
			return
		}
	}
	if x.Duration != nil {
		value := protoreflect.ValueOfMessage(x.Duration.ProtoReflect())
		if !f(fd_ABitOfEverything_duration, value) {
			return
		}
	}
	if x.Struct != nil {
		value := protoreflect.ValueOfMessage(x.Struct.ProtoReflect())
		if !f(fd_ABitOfEverything_struct, value) {
			return
		}
	}
	if x.BoolValue != nil {
		value := protoreflect.ValueOfMessage(x.BoolValue.ProtoReflect())
		if !f(fd_ABitOfEverything_bool_value, value) {
			return
		}
	}
	if x.BytesValue != nil {
		value := protoreflect.ValueOfMessage(x.BytesValue.ProtoReflect())
		if !f(fd_ABitOfEverything_bytes_value, value) {
			return
		}
	}
	if x.DoubleValue != nil {
		value := protoreflect.ValueOfMessage(x.DoubleValue.ProtoReflect())
		if !f(fd_ABitOfEverything_double_value, value) {
			return
		}
	}
	if x.FloatValue != nil {
		value := protoreflect.ValueOfMessage(x.FloatValue.ProtoReflect())
		if !f(fd_ABitOfEverything_float_value, value) {
			return
		}
	}
	if x.Int32Value != nil {
		value := protoreflect.ValueOfMessage(x.Int32Value.ProtoReflect())
		if !f(fd_ABitOfEverything_int32_value, value) {
			return
		}
	}
	if x.Int64Value != nil {
		value := protoreflect.ValueOfMessage(x.Int64Value.ProtoReflect())
		if !f(fd_ABitOfEverything_int64_value, value) {
			return
		}
	}
	if x.StringValue != nil {
		value := protoreflect.ValueOfMessage(x.StringValue.ProtoReflect())
		if !f(fd_ABitOfEverything_string_value, value) {
			return
		}
	}
	if x.Uint32Value != nil {
		value := protoreflect.ValueOfMessage(x.Uint32Value.ProtoReflect())
		if !f(fd_ABitOfEverything_uint32_value, value) {
			return
		}
	}
	if x.Uint64Value != nil {
		value := protoreflect.ValueOfMessage(x.Uint64Value.ProtoReflect())
		if !f(fd_ABitOfEverything_uint64_value, value) {
			return
		}
	}
	if x.FieldMask != nil {
		value := protoreflect.ValueOfMessage(x.FieldMask.ProtoReflect())
		if !f(fd_ABitOfEverything_field_mask, value) {
			return
		}
	}
	if x.ListValue != nil {
		value := protoreflect.ValueOfMessage(x.ListValue.ProtoReflect())
		if !f(fd_ABitOfEverything_list_value, value) {
			return
		}
	}
	if x.Value != nil {
		value := protoreflect.ValueOfMessage(x.Value.ProtoReflect())
		if !f(fd_ABitOfEverything_value, value) {
			return
		}
	}
	if x.NullValue != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.NullValue))
		if !f(fd_ABitOfEverything_null_value, value) {
			return
		}
	}
	if x.Empty != nil {
		value := protoreflect.ValueOfMessage(x.Empty.ProtoReflect())
		if !f(fd_ABitOfEverything_empty, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ABitOfEverything) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "testpb.ABitOfEverything.message":
		return x.Message != nil
	case "testpb.ABitOfEverything.enum":
		return x.Enum != 0
	case "testpb.ABitOfEverything.str_map":
		return len(x.StrMap) != 0
	case "testpb.ABitOfEverything.int32_map":
		return len(x.Int32Map) != 0
	case "testpb.ABitOfEverything.bool_map":
		return len(x.BoolMap) != 0
	case "testpb.ABitOfEverything.repeated":
		return len(x.Repeated) != 0
	case "testpb.ABitOfEverything.string":
		return x.String_ != ""
	case "testpb.ABitOfEverything.bool":
		return x.Bool != false
	case "testpb.ABitOfEverything.bytes":
		return len(x.Bytes) != 0
	case "testpb.ABitOfEverything.i32":
		return x.I32 != int32(0)
	case "testpb.ABitOfEverything.f32":
		return x.F32 != uint32(0)
	case "testpb.ABitOfEverything.u32":
		return x.U32 != uint32(0)
	case "testpb.ABitOfEverything.si32":
		return x.Si32 != int32(0)
	case "testpb.ABitOfEverything.sf32":
		return x.Sf32 != int32(0)
	case "testpb.ABitOfEverything.i64":
		return x.I64 != int64(0)
	case "testpb.ABitOfEverything.f64":
		return x.F64 != uint64(0)
	case "testpb.ABitOfEverything.u64":
		return x.U64 != uint64(0)
	case "testpb.ABitOfEverything.si64":
		return x.Si64 != int64(0)
	case "testpb.ABitOfEverything.sf64":
		return x.Sf64 != int64(0)
	case "testpb.ABitOfEverything.float":
		return x.Float != float32(0) || math.Signbit(float64(x.Float))
	case "testpb.ABitOfEverything.double":
		return x.Double != float64(0) || math.Signbit(x.Double)
	case "testpb.ABitOfEverything.any":
		return x.Any != nil
	case "testpb.ABitOfEverything.timestamp":
		return x.Timestamp != nil
	case "testpb.ABitOfEverything.duration":
		return x.Duration != nil
	case "testpb.ABitOfEverything.struct":
		return x.Struct != nil
	case "testpb.ABitOfEverything.bool_value":
		return x.BoolValue != nil
	case "testpb.ABitOfEverything.bytes_value":
		return x.BytesValue != nil
	case "testpb.ABitOfEverything.double_value":
		return x.DoubleValue != nil
	case "testpb.ABitOfEverything.float_value":
		return x.FloatValue != nil
	case "testpb.ABitOfEverything.int32_value":
		return x.Int32Value != nil
	case "testpb.ABitOfEverything.int64_value":
		return x.Int64Value != nil
	case "testpb.ABitOfEverything.string_value":
		return x.StringValue != nil
	case "testpb.ABitOfEverything.uint32_value":
		return x.Uint32Value != nil
	case "testpb.ABitOfEverything.uint64_value":
		return x.Uint64Value != nil
	case "testpb.ABitOfEverything.field_mask":
		return x.FieldMask != nil
	case "testpb.ABitOfEverything.list_value":
		return x.ListValue != nil
	case "testpb.ABitOfEverything.value":
		return x.Value != nil
	case "testpb.ABitOfEverything.null_value":
		return x.NullValue != 0
	case "testpb.ABitOfEverything.empty":
		return x.Empty != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.ABitOfEverything"))
		}
		panic(fmt.Errorf("message testpb.ABitOfEverything does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ABitOfEverything) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "testpb.ABitOfEverything.message":
		x.Message = nil
	case "testpb.ABitOfEverything.enum":
		x.Enum = 0
	case "testpb.ABitOfEverything.str_map":
		x.StrMap = nil
	case "testpb.ABitOfEverything.int32_map":
		x.Int32Map = nil
	case "testpb.ABitOfEverything.bool_map":
		x.BoolMap = nil
	case "testpb.ABitOfEverything.repeated":
		x.Repeated = nil
	case "testpb.ABitOfEverything.string":
		x.String_ = ""
	case "testpb.ABitOfEverything.bool":
		x.Bool = false
	case "testpb.ABitOfEverything.bytes":
		x.Bytes = nil
	case "testpb.ABitOfEverything.i32":
		x.I32 = int32(0)
	case "testpb.ABitOfEverything.f32":
		x.F32 = uint32(0)
	case "testpb.ABitOfEverything.u32":
		x.U32 = uint32(0)
	case "testpb.ABitOfEverything.si32":
		x.Si32 = int32(0)
	case "testpb.ABitOfEverything.sf32":
		x.Sf32 = int32(0)
	case "testpb.ABitOfEverything.i64":
		x.I64 = int64(0)
	case "testpb.ABitOfEverything.f64":
		x.F64 = uint64(0)
	case "testpb.ABitOfEverything.u64":
		x.U64 = uint64(0)
	case "testpb.ABitOfEverything.si64":
		x.Si64 = int64(0)
	case "testpb.ABitOfEverything.sf64":
		x.Sf64 = int64(0)
	case "testpb.ABitOfEverything.float":
		x.Float = float32(0)
	case "testpb.ABitOfEverything.double":
		x.Double = float64(0)
	case "testpb.ABitOfEverything.any":
		x.Any = nil
	case "testpb.ABitOfEverything.timestamp":
		x.Timestamp = nil
	case "testpb.ABitOfEverything.duration":
		x.Duration = nil
	case "testpb.ABitOfEverything.struct":
		x.Struct = nil
	case "testpb.ABitOfEverything.bool_value":
		x.BoolValue = nil
	case "testpb.ABitOfEverything.bytes_value":
		x.BytesValue = nil
	case "testpb.ABitOfEverything.double_value":
		x.DoubleValue = nil
	case "testpb.ABitOfEverything.float_value":
		x.FloatValue = nil
	case "testpb.ABitOfEverything.int32_value":
		x.Int32Value = nil
	case "testpb.ABitOfEverything.int64_value":
		x.Int64Value = nil
	case "testpb.ABitOfEverything.string_value":
		x.StringValue = nil
	case "testpb.ABitOfEverything.uint32_value":
		x.Uint32Value = nil
	case "testpb.ABitOfEverything.uint64_value":
		x.Uint64Value = nil
	case "testpb.ABitOfEverything.field_mask":
		x.FieldMask = nil
	case "testpb.ABitOfEverything.list_value":
		x.ListValue = nil
	case "testpb.ABitOfEverything.value":
		x.Value = nil
	case "testpb.ABitOfEverything.null_value":
		x.NullValue = 0
	case "testpb.ABitOfEverything.empty":
		x.Empty = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.ABitOfEverything"))
		}
		panic(fmt.Errorf("message testpb.ABitOfEverything does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ABitOfEverything) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "testpb.ABitOfEverything.message":
		value := x.Message
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.enum":
		value := x.Enum
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "testpb.ABitOfEverything.str_map":
		if len(x.StrMap) == 0 {
			return protoreflect.ValueOfMap(&_ABitOfEverything_3_map{})
		}
		mapValue := &_ABitOfEverything_3_map{m: &x.StrMap}
		return protoreflect.ValueOfMap(mapValue)
	case "testpb.ABitOfEverything.int32_map":
		if len(x.Int32Map) == 0 {
			return protoreflect.ValueOfMap(&_ABitOfEverything_4_map{})
		}
		mapValue := &_ABitOfEverything_4_map{m: &x.Int32Map}
		return protoreflect.ValueOfMap(mapValue)
	case "testpb.ABitOfEverything.bool_map":
		if len(x.BoolMap) == 0 {
			return protoreflect.ValueOfMap(&_ABitOfEverything_5_map{})
		}
		mapValue := &_ABitOfEverything_5_map{m: &x.BoolMap}
		return protoreflect.ValueOfMap(mapValue)
	case "testpb.ABitOfEverything.repeated":
		if len(x.Repeated) == 0 {
			return protoreflect.ValueOfList(&_ABitOfEverything_6_list{})
		}
		listValue := &_ABitOfEverything_6_list{list: &x.Repeated}
		return protoreflect.ValueOfList(listValue)
	case "testpb.ABitOfEverything.string":
		value := x.String_
		return protoreflect.ValueOfString(value)
	case "testpb.ABitOfEverything.bool":
		value := x.Bool
		return protoreflect.ValueOfBool(value)
	case "testpb.ABitOfEverything.bytes":
		value := x.Bytes
		return protoreflect.ValueOfBytes(value)
	case "testpb.ABitOfEverything.i32":
		value := x.I32
		return protoreflect.ValueOfInt32(value)
	case "testpb.ABitOfEverything.f32":
		value := x.F32
		return protoreflect.ValueOfUint32(value)
	case "testpb.ABitOfEverything.u32":
		value := x.U32
		return protoreflect.ValueOfUint32(value)
	case "testpb.ABitOfEverything.si32":
		value := x.Si32
		return protoreflect.ValueOfInt32(value)
	case "testpb.ABitOfEverything.sf32":
		value := x.Sf32
		return protoreflect.ValueOfInt32(value)
	case "testpb.ABitOfEverything.i64":
		value := x.I64
		return protoreflect.ValueOfInt64(value)
	case "testpb.ABitOfEverything.f64":
		value := x.F64
		return protoreflect.ValueOfUint64(value)
	case "testpb.ABitOfEverything.u64":
		value := x.U64
		return protoreflect.ValueOfUint64(value)
	case "testpb.ABitOfEverything.si64":
		value := x.Si64
		return protoreflect.ValueOfInt64(value)
	case "testpb.ABitOfEverything.sf64":
		value := x.Sf64
		return protoreflect.ValueOfInt64(value)
	case "testpb.ABitOfEverything.float":
		value := x.Float
		return protoreflect.ValueOfFloat32(value)
	case "testpb.ABitOfEverything.double":
		value := x.Double
		return protoreflect.ValueOfFloat64(value)
	case "testpb.ABitOfEverything.any":
		value := x.Any
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.duration":
		value := x.Duration
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.struct":
		value := x.Struct
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.bool_value":
		value := x.BoolValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.bytes_value":
		value := x.BytesValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.double_value":
		value := x.DoubleValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.float_value":
		value := x.FloatValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.int32_value":
		value := x.Int32Value
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.int64_value":
		value := x.Int64Value
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.string_value":
		value := x.StringValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.uint32_value":
		value := x.Uint32Value
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.uint64_value":
		value := x.Uint64Value
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.field_mask":
		value := x.FieldMask
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.list_value":
		value := x.ListValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.value":
		value := x.Value
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.ABitOfEverything.null_value":
		value := x.NullValue
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "testpb.ABitOfEverything.empty":
		value := x.Empty
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.ABitOfEverything"))
		}
		panic(fmt.Errorf("message testpb.ABitOfEverything does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ABitOfEverything) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "testpb.ABitOfEverything.message":
		x.Message = value.Message().Interface().(*NestedMessage)
	case "testpb.ABitOfEverything.enum":
		x.Enum = (AnEnum)(value.Enum())
	case "testpb.ABitOfEverything.str_map":
		mv := value.Map()
		cmv := mv.(*_ABitOfEverything_3_map)
		x.StrMap = *cmv.m
	case "testpb.ABitOfEverything.int32_map":
		mv := value.Map()
		cmv := mv.(*_ABitOfEverything_4_map)
		x.Int32Map = *cmv.m
	case "testpb.ABitOfEverything.bool_map":
		mv := value.Map()
		cmv := mv.(*_ABitOfEverything_5_map)
		x.BoolMap = *cmv.m
	case "testpb.ABitOfEverything.repeated":
		lv := value.List()
		clv := lv.(*_ABitOfEverything_6_list)
		x.Repeated = *clv.list
	case "testpb.ABitOfEverything.string":
		x.String_ = value.Interface().(string)
	case "testpb.ABitOfEverything.bool":
		x.Bool = value.Bool()
	case "testpb.ABitOfEverything.bytes":
		x.Bytes = value.Bytes()
	case "testpb.ABitOfEverything.i32":
		x.I32 = int32(value.Int())
	case "testpb.ABitOfEverything.f32":
		x.F32 = uint32(value.Uint())
	case "testpb.ABitOfEverything.u32":
		x.U32 = uint32(value.Uint())
	case "testpb.ABitOfEverything.si32":
		x.Si32 = int32(value.Int())
	case "testpb.ABitOfEverything.sf32":
		x.Sf32 = int32(value.Int())
	case "testpb.ABitOfEverything.i64":
		x.I64 = value.Int()
	case "testpb.ABitOfEverything.f64":
		x.F64 = value.Uint()
	case "testpb.ABitOfEverything.u64":
		x.U64 = value.Uint()
	case "testpb.ABitOfEverything.si64":
		x.Si64 = value.Int()
	case "testpb.ABitOfEverything.sf64":
		x.Sf64 = value.Int()
	case "testpb.ABitOfEverything.float":
		x.Float = float32(value.Float())
	case "testpb.ABitOfEverything.double":
		x.Double = value.Float()
	case "testpb.ABitOfEverything.any":
		x.Any = value.Message().Interface().(*anypb.Any)
	case "testpb.ABitOfEverything.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "testpb.ABitOfEverything.duration":
		x.Duration = value.Message().Interface().(*durationpb.Duration)
	case "testpb.ABitOfEverything.struct":
		x.Struct = value.Message().Interface().(*structpb.Struct)
	case "testpb.ABitOfEverything.bool_value":
		x.BoolValue = value.Message().Interface().(*wrapperspb.BoolValue)
	case "testpb.ABitOfEverything.bytes_value":
		x.BytesValue = value.Message().Interface().(*wrapperspb.BytesValue)
	case "testpb.ABitOfEverything.double_value":
		x.DoubleValue = value.Message().Interface().(*wrapperspb.DoubleValue)
	case "testpb.ABitOfEverything.float_value":
		x.FloatValue = value.Message().Interface().(*wrapperspb.FloatValue)
	case "testpb.ABitOfEverything.int32_value":
		x.Int32Value = value.Message().Interface().(*wrapperspb.Int32Value)
	case "testpb.ABitOfEverything.int64_value":
		x.Int64Value = value.Message().Interface().(*wrapperspb.Int64Value)
	case "testpb.ABitOfEverything.string_value":
		x.StringValue = value.Message().Interface().(*wrapperspb.StringValue)
	case "testpb.ABitOfEverything.uint32_value":
		x.Uint32Value = value.Message().Interface().(*wrapperspb.UInt32Value)
	case "testpb.ABitOfEverything.uint64_value":
		x.Uint64Value = value.Message().Interface().(*wrapperspb.UInt64Value)
	case "testpb.ABitOfEverything.field_mask":
		x.FieldMask = value.Message().Interface().(*fieldmaskpb.FieldMask)
	case "testpb.ABitOfEverything.list_value":
		x.ListValue = value.Message().Interface().(*structpb.ListValue)
	case "testpb.ABitOfEverything.value":
		x.Value = value.Message().Interface().(*structpb.Value)
	case "testpb.ABitOfEverything.null_value":
		x.NullValue = (structpb.NullValue)(value.Enum())
	case "testpb.ABitOfEverything.empty":
		x.Empty = value.Message().Interface().(*emptypb.Empty)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.ABitOfEverything"))
		}
		panic(fmt.Errorf("message testpb.ABitOfEverything does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ABitOfEverything) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.ABitOfEverything.message":
		if x.Message == nil {
			x.Message = new(NestedMessage)
		}
		return protoreflect.ValueOfMessage(x.Message.ProtoReflect())
	case "testpb.ABitOfEverything.str_map":
		if x.StrMap == nil {
			x.StrMap = make(map[string]string)
		}
		value := &_ABitOfEverything_3_map{m: &x.StrMap}
		return protoreflect.ValueOfMap(value)
	case "testpb.ABitOfEverything.int32_map":
		if x.Int32Map == nil {
			x.Int32Map = make(map[int32]string)
		}
		value := &_ABitOfEverything_4_map{m: &x.Int32Map}
		return protoreflect.ValueOfMap(value)
	case "testpb.ABitOfEverything.bool_map":
		if x.BoolMap == nil {
			x.BoolMap = make(map[bool]string)
		}
		value := &_ABitOfEverything_5_map{m: &x.BoolMap}
		return protoreflect.ValueOfMap(value)
	case "testpb.ABitOfEverything.repeated":
		if x.Repeated == nil {
			x.Repeated = []int32{}
		}
		value := &_ABitOfEverything_6_list{list: &x.Repeated}
		return protoreflect.ValueOfList(value)
	case "testpb.ABitOfEverything.any":
		if x.Any == nil {
			x.Any = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Any.ProtoReflect())
	case "testpb.ABitOfEverything.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "testpb.ABitOfEverything.duration":
		if x.Duration == nil {
			x.Duration = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.Duration.ProtoReflect())
	case "testpb.ABitOfEverything.struct":
		if x.Struct == nil {
			x.Struct = new(structpb.Struct)
		}
		return protoreflect.ValueOfMessage(x.Struct.ProtoReflect())
	case "testpb.ABitOfEverything.bool_value":
		if x.BoolValue == nil {
			x.BoolValue = new(wrapperspb.BoolValue)
		}
		return protoreflect.ValueOfMessage(x.BoolValue.ProtoReflect())
	case "testpb.ABitOfEverything.bytes_value":
		if x.BytesValue == nil {
			x.BytesValue = new(wrapperspb.BytesValue)
		}
		return protoreflect.ValueOfMessage(x.BytesValue.ProtoReflect())
	case "testpb.ABitOfEverything.double_value":
		if x.DoubleValue == nil {
			x.DoubleValue = new(wrapperspb.DoubleValue)
		}
		return protoreflect.ValueOfMessage(x.DoubleValue.ProtoReflect())
	case "testpb.ABitOfEverything.float_value":
		if x.FloatValue == nil {
			x.FloatValue = new(wrapperspb.FloatValue)
		}
		return protoreflect.ValueOfMessage(x.FloatValue.ProtoReflect())
	case "testpb.ABitOfEverything.int32_value":
		if x.Int32Value == nil {
			x.Int32Value = new(wrapperspb.Int32Value)
		}
		return protoreflect.ValueOfMessage(x.Int32Value.ProtoReflect())
	case "testpb.ABitOfEverything.int64_value":
		if x.Int64Value == nil {
			x.Int64Value = new(wrapperspb.Int64Value)
		}
		return protoreflect.ValueOfMessage(x.Int64Value.ProtoReflect())
	case "testpb.ABitOfEverything.string_value":
		if x.StringValue == nil {
			x.StringValue = new(wrapperspb.StringValue)
		}
		return protoreflect.ValueOfMessage(x.StringValue.ProtoReflect())
	case "testpb.ABitOfEverything.uint32_value":
		if x.Uint32Value == nil {
			x.Uint32Value = new(wrapperspb.UInt32Value)
		}
		return protoreflect.ValueOfMessage(x.Uint32Value.ProtoReflect())
	case "testpb.ABitOfEverything.uint64_value":
		if x.Uint64Value == nil {
			x.Uint64Value = new(wrapperspb.UInt64Value)
		}
		return protoreflect.ValueOfMessage(x.Uint64Value.ProtoReflect())
	case "testpb.ABitOfEverything.field_mask":
		if x.FieldMask == nil {
			x.FieldMask = new(fieldmaskpb.FieldMask)
		}
		return protoreflect.ValueOfMessage(x.FieldMask.ProtoReflect())
	case "testpb.ABitOfEverything.list_value":
		if x.ListValue == nil {
			x.ListValue = new(structpb.ListValue)
		}
		return protoreflect.ValueOfMessage(x.ListValue.ProtoReflect())
	case "testpb.ABitOfEverything.value":
		if x.Value == nil {
			x.Value = new(structpb.Value)
		}
		return protoreflect.ValueOfMessage(x.Value.ProtoReflect())
	case "testpb.ABitOfEverything.empty":
		if x.Empty == nil {
			x.Empty = new(emptypb.Empty)
		}
		return protoreflect.ValueOfMessage(x.Empty.ProtoReflect())
	case "testpb.ABitOfEverything.enum":
		panic(fmt.Errorf("field enum of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.string":
		panic(fmt.Errorf("field string of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.bool":
		panic(fmt.Errorf("field bool of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.bytes":
		panic(fmt.Errorf("field bytes of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.i32":
		panic(fmt.Errorf("field i32 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.f32":
		panic(fmt.Errorf("field f32 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.u32":
		panic(fmt.Errorf("field u32 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.si32":
		panic(fmt.Errorf("field si32 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.sf32":
		panic(fmt.Errorf("field sf32 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.i64":
		panic(fmt.Errorf("field i64 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.f64":
		panic(fmt.Errorf("field f64 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.u64":
		panic(fmt.Errorf("field u64 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.si64":
		panic(fmt.Errorf("field si64 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.sf64":
		panic(fmt.Errorf("field sf64 of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.float":
		panic(fmt.Errorf("field float of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.double":
		panic(fmt.Errorf("field double of message testpb.ABitOfEverything is not mutable"))
	case "testpb.ABitOfEverything.null_value":
		panic(fmt.Errorf("field null_value of message testpb.ABitOfEverything is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.ABitOfEverything"))
		}
		panic(fmt.Errorf("message testpb.ABitOfEverything does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ABitOfEverything) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.ABitOfEverything.message":
		m := new(NestedMessage)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.enum":
		return protoreflect.ValueOfEnum(0)
	case "testpb.ABitOfEverything.str_map":
		m := make(map[string]string)
		return protoreflect.ValueOfMap(&_ABitOfEverything_3_map{m: &m})
	case "testpb.ABitOfEverything.int32_map":
		m := make(map[int32]string)
		return protoreflect.ValueOfMap(&_ABitOfEverything_4_map{m: &m})
	case "testpb.ABitOfEverything.bool_map":
		m := make(map[bool]string)
		return protoreflect.ValueOfMap(&_ABitOfEverything_5_map{m: &m})
	case "testpb.ABitOfEverything.repeated":
		list := []int32{}
		return protoreflect.ValueOfList(&_ABitOfEverything_6_list{list: &list})
	case "testpb.ABitOfEverything.string":
		return protoreflect.ValueOfString("")
	case "testpb.ABitOfEverything.bool":
		return protoreflect.ValueOfBool(false)
	case "testpb.ABitOfEverything.bytes":
		return protoreflect.ValueOfBytes(nil)
	case "testpb.ABitOfEverything.i32":
		return protoreflect.ValueOfInt32(int32(0))
	case "testpb.ABitOfEverything.f32":
		return protoreflect.ValueOfUint32(uint32(0))
	case "testpb.ABitOfEverything.u32":
		return protoreflect.ValueOfUint32(uint32(0))
	case "testpb.ABitOfEverything.si32":
		return protoreflect.ValueOfInt32(int32(0))
	case "testpb.ABitOfEverything.sf32":
		return protoreflect.ValueOfInt32(int32(0))
	case "testpb.ABitOfEverything.i64":
		return protoreflect.ValueOfInt64(int64(0))
	case "testpb.ABitOfEverything.f64":
		return protoreflect.ValueOfUint64(uint64(0))
	case "testpb.ABitOfEverything.u64":
		return protoreflect.ValueOfUint64(uint64(0))
	case "testpb.ABitOfEverything.si64":
		return protoreflect.ValueOfInt64(int64(0))
	case "testpb.ABitOfEverything.sf64":
		return protoreflect.ValueOfInt64(int64(0))
	case "testpb.ABitOfEverything.float":
		return protoreflect.ValueOfFloat32(float32(0))
	case "testpb.ABitOfEverything.double":
		return protoreflect.ValueOfFloat64(float64(0))
	case "testpb.ABitOfEverything.any":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.duration":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.struct":
		m := new(structpb.Struct)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.bool_value":
		m := new(wrapperspb.BoolValue)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.bytes_value":
		m := new(wrapperspb.BytesValue)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.double_value":
		m := new(wrapperspb.DoubleValue)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.float_value":
		m := new(wrapperspb.FloatValue)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.int32_value":
		m := new(wrapperspb.Int32Value)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.int64_value":
		m := new(wrapperspb.Int64Value)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.string_value":
		m := new(wrapperspb.StringValue)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.uint32_value":
		m := new(wrapperspb.UInt32Value)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.uint64_value":
		m := new(wrapperspb.UInt64Value)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.field_mask":
		m := new(fieldmaskpb.FieldMask)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.list_value":
		m := new(structpb.ListValue)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.value":
		m := new(structpb.Value)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.ABitOfEverything.null_value":
		return protoreflect.ValueOfEnum(0)
	case "testpb.ABitOfEverything.empty":
		m := new(emptypb.Empty)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.ABitOfEverything"))
		}
		panic(fmt.Errorf("message testpb.ABitOfEverything does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ABitOfEverything) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in testpb.ABitOfEverything", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ABitOfEverything) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ABitOfEverything) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ABitOfEverything) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ABitOfEverything) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ABitOfEverything)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Message != nil {
			l = options.Size(x.Message)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Enum != 0 {
			n += 1 + runtime.Sov(uint64(x.Enum))
		}
		if len(x.StrMap) > 0 {
			SiZeMaP := func(k string, v string) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.StrMap))
				for k := range x.StrMap {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.StrMap[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.StrMap {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.Int32Map) > 0 {
			SiZeMaP := func(k int32, v string) {
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]int32, 0, len(x.Int32Map))
				for k := range x.Int32Map {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.Int32Map[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Int32Map {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.BoolMap) > 0 {
			SiZeMaP := func(k bool, v string) {
				mapEntrySize := 1 + 1 + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]bool, 0, len(x.BoolMap))
				for k := range x.BoolMap {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return !sortme[i] && sortme[j]
				})
				for _, k := range sortme {
					v := x.BoolMap[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.BoolMap {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.Repeated) > 0 {
			l = 0
			for _, e := range x.Repeated {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.String_)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Bool {
			n += 2
		}
		l = len(x.Bytes)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.I32 != 0 {
			n += 1 + runtime.Sov(uint64(x.I32))
		}
		if x.F32 != 0 {
			n += 5
		}
		if x.U32 != 0 {
			n += 1 + runtime.Sov(uint64(x.U32))
		}
		if x.Si32 != 0 {
			n += 1 + runtime.Soz(uint64(x.Si32))
		}
		if x.Sf32 != 0 {
			n += 5
		}
		if x.I64 != 0 {
			n += 1 + runtime.Sov(uint64(x.I64))
		}
		if x.F64 != 0 {
			n += 10
		}
		if x.U64 != 0 {
			n += 2 + runtime.Sov(uint64(x.U64))
		}
		if x.Si64 != 0 {
			n += 2 + runtime.Soz(uint64(x.Si64))
		}
		if x.Sf64 != 0 {
			n += 10
		}
		if x.Float != 0 || math.Signbit(float64(x.Float)) {
			n += 6
		}
		if x.Double != 0 || math.Signbit(x.Double) {
			n += 10
		}
		if x.Any != nil {
			l = options.Size(x.Any)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Duration != nil {
			l = options.Size(x.Duration)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Struct != nil {
			l = options.Size(x.Struct)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.BoolValue != nil {
			l = options.Size(x.BoolValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.BytesValue != nil {
			l = options.Size(x.BytesValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.DoubleValue != nil {
			l = options.Size(x.DoubleValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.FloatValue != nil {
			l = options.Size(x.FloatValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Int32Value != nil {
			l = options.Size(x.Int32Value)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Int64Value != nil {
			l = options.Size(x.Int64Value)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.StringValue != nil {
			l = options.Size(x.StringValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Uint32Value != nil {
			l = options.Size(x.Uint32Value)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Uint64Value != nil {
			l = options.Size(x.Uint64Value)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.FieldMask != nil {
			l = options.Size(x.FieldMask)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.ListValue != nil {
			l = options.Size(x.ListValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Value != nil {
			l = options.Size(x.Value)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.NullValue != 0 {
			n += 2 + runtime.Sov(uint64(x.NullValue))
		}
		if x.Empty != nil {
			l = options.Size(x.Empty)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ABitOfEverything)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Empty != nil {
			encoded, err := options.Marshal(x.Empty)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xba
		}
		if x.NullValue != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NullValue))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb0
		}
		if x.Value != nil {
			encoded, err := options.Marshal(x.Value)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
		if x.ListValue != nil {
			encoded, err := options.Marshal(x.ListValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
		if x.FieldMask != nil {
			encoded, err := options.Marshal(x.FieldMask)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
		if x.Uint64Value != nil {
			encoded, err := options.Marshal(x.Uint64Value)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
		if x.Uint32Value != nil {
			encoded, err := options.Marshal(x.Uint32Value)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
		if x.StringValue != nil {
			encoded, err := options.Marshal(x.StringValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
		if x.Int64Value != nil {
			encoded, err := options.Marshal(x.Int64Value)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
		if x.Int32Value != nil {
			encoded, err := options.Marshal(x.Int32Value)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
		if x.FloatValue != nil {
			encoded, err := options.Marshal(x.FloatValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
		if x.DoubleValue != nil {
			encoded, err := options.Marshal(x.DoubleValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
		if x.BytesValue != nil {
			encoded, err := options.Marshal(x.BytesValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
		if x.BoolValue != nil {
			encoded, err := options.Marshal(x.BoolValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
		if x.Struct != nil {
			encoded, err := options.Marshal(x.Struct)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
		if x.Duration != nil {
			encoded, err := options.Marshal(x.Duration)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
		if x.Any != nil {
			encoded, err := options.Marshal(x.Any)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if x.Double != 0 || math.Signbit(x.Double) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.Double))))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa9
		}
		if x.Float != 0 || math.Signbit(float64(x.Float)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.Float))))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa5
		}
		if x.Sf64 != 0 {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(x.Sf64))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x99
		}
		if x.Si64 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64((uint64(x.Si64)<<1)^uint64((x.Si64>>63))))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.U64 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.U64))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.F64 != 0 {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(x.F64))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x81
		}
		if x.I64 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.I64))
			i--
			dAtA[i] = 0x78
		}
		if x.Sf32 != 0 {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(x.Sf32))
			i--
			dAtA[i] = 0x75
		}
		if x.Si32 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64((uint32(x.Si32)<<1)^uint32((x.Si32>>31))))
			i--
			dAtA[i] = 0x68
		}
		if x.U32 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.U32))
			i--
			dAtA[i] = 0x60
		}
		if x.F32 != 0 {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(x.F32))
			i--
			dAtA[i] = 0x5d
		}
		if x.I32 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.I32))
			i--
			dAtA[i] = 0x50
		}
		if len(x.Bytes) > 0 {
			i -= len(x.Bytes)
			copy(dAtA[i:], x.Bytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bytes)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Bool {
			i--
			if x.Bool {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if len(x.String_) > 0 {
			i -= len(x.String_)
			copy(dAtA[i:], x.String_)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.String_)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Repeated) > 0 {
			var pksize2 int
			for _, num := range x.Repeated {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.Repeated {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x32
		}
		if len(x.BoolMap) > 0 {
			MaRsHaLmAp := func(k bool, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i--
				if k {
					dAtA[i] = 1
				} else {
					dAtA[i] = 0
				}
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x2a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForBoolMap := make([]bool, 0, len(x.BoolMap))
				for k := range x.BoolMap {
					keysForBoolMap = append(keysForBoolMap, bool(k))
				}
				sort.Slice(keysForBoolMap, func(i, j int) bool {
					return !keysForBoolMap[i] && keysForBoolMap[j]
				})
				for iNdEx := len(keysForBoolMap) - 1; iNdEx >= 0; iNdEx-- {
					v := x.BoolMap[bool(keysForBoolMap[iNdEx])]
					out, err := MaRsHaLmAp(keysForBoolMap[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.BoolMap {
					v := x.BoolMap[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.Int32Map) > 0 {
			MaRsHaLmAp := func(k int32, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x22
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForInt32Map := make([]int32, 0, len(x.Int32Map))
				for k := range x.Int32Map {
					keysForInt32Map = append(keysForInt32Map, int32(k))
				}
				sort.Slice(keysForInt32Map, func(i, j int) bool {
					return keysForInt32Map[i] < keysForInt32Map[j]
				})
				for iNdEx := len(keysForInt32Map) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Int32Map[int32(keysForInt32Map[iNdEx])]
					out, err := MaRsHaLmAp(keysForInt32Map[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Int32Map {
					v := x.Int32Map[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.StrMap) > 0 {
			MaRsHaLmAp := func(k string, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x1a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForStrMap := make([]string, 0, len(x.StrMap))
				for k := range x.StrMap {
					keysForStrMap = append(keysForStrMap, string(k))
				}
				sort.Slice(keysForStrMap, func(i, j int) bool {
					return keysForStrMap[i] < keysForStrMap[j]
				})
				for iNdEx := len(keysForStrMap) - 1; iNdEx >= 0; iNdEx-- {
					v := x.StrMap[string(keysForStrMap[iNdEx])]
					out, err := MaRsHaLmAp(keysForStrMap[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.StrMap {
					v := x.StrMap[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if x.Enum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Enum))
			i--
			dAtA[i] = 0x10
		}
		if x.Message != nil {
			encoded, err := options.Marshal(x.Message)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ABitOfEverything)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ABitOfEverything: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ABitOfEverything: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Message == nil {
					x.Message = &NestedMessage{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Message); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
				}
				x.Enum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Enum |= AnEnum(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StrMap", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StrMap == nil {
					x.StrMap = make(map[string]string)
				}
				var mapkey string
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.StrMap[mapkey] = mapvalue
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Int32Map", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Int32Map == nil {
					x.Int32Map = make(map[int32]string)
				}
				var mapkey int32
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= int32(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Int32Map[mapkey] = mapvalue
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BoolMap", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BoolMap == nil {
					x.BoolMap = make(map[bool]string)
				}
				var mapkey bool
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var mapkeytemp int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkeytemp |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						mapkey = bool(mapkeytemp != 0)
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.BoolMap[mapkey] = mapvalue
				iNdEx = postIndex
			case 6:
				if wireType == 0 {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Repeated = append(x.Repeated, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Repeated) == 0 {
						x.Repeated = make([]int32, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int32
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int32(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Repeated = append(x.Repeated, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Repeated", wireType)
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.String_ = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Bool = bool(v != 0)
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bytes = append(x.Bytes[:0], dAtA[iNdEx:postIndex]...)
				if x.Bytes == nil {
					x.Bytes = []byte{}
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
				}
				x.I32 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.I32 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field F32", wireType)
				}
				x.F32 = 0
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.F32 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
				}
				x.U32 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.U32 |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Si32", wireType)
				}
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				x.Si32 = v
			case 14:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sf32", wireType)
				}
				x.Sf32 = 0
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sf32 = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
				}
				x.I64 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.I64 |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
				}
				x.F64 = 0
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.F64 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
				}
				x.U64 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.U64 |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Si64", wireType)
				}
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				x.Si64 = int64(v)
			case 19:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sf64", wireType)
				}
				x.Sf64 = 0
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sf64 = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
			case 20:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.Float = float32(math.Float32frombits(v))
			case 21:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.Double = float64(math.Float64frombits(v))
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Any == nil {
					x.Any = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Any); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Duration == nil {
					x.Duration = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Duration); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 25:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Struct", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Struct == nil {
					x.Struct = &structpb.Struct{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Struct); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 26:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BoolValue == nil {
					x.BoolValue = &wrapperspb.BoolValue{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BoolValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 27:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BytesValue == nil {
					x.BytesValue = &wrapperspb.BytesValue{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BytesValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 28:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DoubleValue == nil {
					x.DoubleValue = &wrapperspb.DoubleValue{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DoubleValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 29:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FloatValue == nil {
					x.FloatValue = &wrapperspb.FloatValue{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FloatValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 30:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Int32Value == nil {
					x.Int32Value = &wrapperspb.Int32Value{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Int32Value); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 31:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Int64Value == nil {
					x.Int64Value = &wrapperspb.Int64Value{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Int64Value); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 32:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StringValue == nil {
					x.StringValue = &wrapperspb.StringValue{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StringValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 33:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uint32Value", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Uint32Value == nil {
					x.Uint32Value = &wrapperspb.UInt32Value{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Uint32Value); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 34:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uint64Value", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Uint64Value == nil {
					x.Uint64Value = &wrapperspb.UInt64Value{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Uint64Value); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 35:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FieldMask == nil {
					x.FieldMask = &fieldmaskpb.FieldMask{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FieldMask); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 36:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ListValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ListValue == nil {
					x.ListValue = &structpb.ListValue{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ListValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 37:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Value == nil {
					x.Value = &structpb.Value{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Value); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 38:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NullValue", wireType)
				}
				x.NullValue = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NullValue |= structpb.NullValue(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 39:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Empty == nil {
					x.Empty = &emptypb.Empty{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Empty); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NestedMessage     protoreflect.MessageDescriptor
	fd_NestedMessage_foo protoreflect.FieldDescriptor
	fd_NestedMessage_bar protoreflect.FieldDescriptor
)

func init() {
	file_testpb_test_proto_init()
	md_NestedMessage = File_testpb_test_proto.Messages().ByName("NestedMessage")
	fd_NestedMessage_foo = md_NestedMessage.Fields().ByName("foo")
	fd_NestedMessage_bar = md_NestedMessage.Fields().ByName("bar")
}

var _ protoreflect.Message = (*fastReflection_NestedMessage)(nil)

type fastReflection_NestedMessage NestedMessage

func (x *NestedMessage) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NestedMessage)(x)
}

func (x *NestedMessage) slowProtoReflect() protoreflect.Message {
	mi := &file_testpb_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NestedMessage_messageType fastReflection_NestedMessage_messageType
var _ protoreflect.MessageType = fastReflection_NestedMessage_messageType{}

type fastReflection_NestedMessage_messageType struct{}

func (x fastReflection_NestedMessage_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NestedMessage)(nil)
}
func (x fastReflection_NestedMessage_messageType) New() protoreflect.Message {
	return new(fastReflection_NestedMessage)
}
func (x fastReflection_NestedMessage_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NestedMessage
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NestedMessage) Descriptor() protoreflect.MessageDescriptor {
	return md_NestedMessage
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NestedMessage) Type() protoreflect.MessageType {
	return _fastReflection_NestedMessage_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NestedMessage) New() protoreflect.Message {
	return new(fastReflection_NestedMessage)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NestedMessage) Interface() protoreflect.ProtoMessage {
	return (*NestedMessage)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NestedMessage) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Foo != "" {
		value := protoreflect.ValueOfString(x.Foo)
		if !f(fd_NestedMessage_foo, value) {
			return
		}
	}
	if x.Bar != int32(0) {
		value := protoreflect.ValueOfInt32(x.Bar)
		if !f(fd_NestedMessage_bar, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NestedMessage) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "testpb.NestedMessage.foo":
		return x.Foo != ""
	case "testpb.NestedMessage.bar":
		return x.Bar != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.NestedMessage"))
		}
		panic(fmt.Errorf("message testpb.NestedMessage does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NestedMessage) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "testpb.NestedMessage.foo":
		x.Foo = ""
	case "testpb.NestedMessage.bar":
		x.Bar = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.NestedMessage"))
		}
		panic(fmt.Errorf("message testpb.NestedMessage does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NestedMessage) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "testpb.NestedMessage.foo":
		value := x.Foo
		return protoreflect.ValueOfString(value)
	case "testpb.NestedMessage.bar":
		value := x.Bar
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.NestedMessage"))
		}
		panic(fmt.Errorf("message testpb.NestedMessage does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NestedMessage) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "testpb.NestedMessage.foo":
		x.Foo = value.Interface().(string)
	case "testpb.NestedMessage.bar":
		x.Bar = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.NestedMessage"))
		}
		panic(fmt.Errorf("message testpb.NestedMessage does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NestedMessage) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.NestedMessage.foo":
		panic(fmt.Errorf("field foo of message testpb.NestedMessage is not mutable"))
	case "testpb.NestedMessage.bar":
		panic(fmt.Errorf("field bar of message testpb.NestedMessage is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.NestedMessage"))
		}
		panic(fmt.Errorf("message testpb.NestedMessage does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NestedMessage) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.NestedMessage.foo":
		return protoreflect.ValueOfString("")
	case "testpb.NestedMessage.bar":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.NestedMessage"))
		}
		panic(fmt.Errorf("message testpb.NestedMessage does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NestedMessage) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in testpb.NestedMessage", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NestedMessage) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NestedMessage) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NestedMessage) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NestedMessage) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NestedMessage)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Foo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Bar != 0 {
			n += 1 + runtime.Sov(uint64(x.Bar))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NestedMessage)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Bar != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Bar))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Foo) > 0 {
			i -= len(x.Foo)
			copy(dAtA[i:], x.Foo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Foo)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NestedMessage)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NestedMessage: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NestedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Foo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
				}
				x.Bar = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Bar |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: testpb/test.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnEnum int32

const (
	AnEnum_UNDEFINED AnEnum = 0
	AnEnum_ONE       AnEnum = 1
	AnEnum_TWO       AnEnum = 2
)

// Enum value maps for AnEnum.
var (
	AnEnum_name = map[int32]string{
		0: "UNDEFINED",
		1: "ONE",
		2: "TWO",
	}
	AnEnum_value = map[string]int32{
		"UNDEFINED": 0,
		"ONE":       1,
		"TWO":       2,
	}
)

func (x AnEnum) Enum() *AnEnum {
	p := new(AnEnum)
	*p = x
	return p
}

func (x AnEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_testpb_test_proto_enumTypes[0].Descriptor()
}

func (AnEnum) Type() protoreflect.EnumType {
	return &file_testpb_test_proto_enumTypes[0]
}

func (x AnEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnEnum.Descriptor instead.
func (AnEnum) EnumDescriptor() ([]byte, []int) {
	return file_testpb_test_proto_rawDescGZIP(), []int{0}
}

type ABitOfEverything struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message
	// Generates JSON objects. Message field names are mapped to lowerCamelCase and become JSON object keys. If the json_name field option is specified, the specified value will be used as the key instead. Parsers accept both the lowerCamelCase name (or the one specified by the json_name option) and the original proto field name. null is an accepted value for all field types and treated as the default value of the corresponding field type.
	Message *NestedMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// enum
	// The name of the enum value as specified in proto is used. Parsers accept both enum names and integer values.
	Enum AnEnum `protobuf:"varint,2,opt,name=enum,proto3,enum=testpb.AnEnum" json:"enum,omitempty"`
	// map
	// All keys are converted to strings.
	StrMap   map[string]string `protobuf:"bytes,3,rep,name=str_map,json=strMap,proto3" json:"str_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int32Map map[int32]string  `protobuf:"bytes,4,rep,name=int32_map,json=int32Map,proto3" json:"int32_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolMap  map[bool]string   `protobuf:"bytes,5,rep,name=bool_map,json=boolMap,proto3" json:"bool_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// repeated
	Repeated    []int32                 `protobuf:"varint,6,rep,packed,name=repeated,proto3" json:"repeated,omitempty"`
	String_     string                  `protobuf:"bytes,7,opt,name=string,proto3" json:"string,omitempty"`
	Bool        bool                    `protobuf:"varint,8,opt,name=bool,proto3" json:"bool,omitempty"`
	Bytes       []byte                  `protobuf:"bytes,9,opt,name=bytes,proto3" json:"bytes,omitempty"`
	I32         int32                   `protobuf:"varint,10,opt,name=i32,proto3" json:"i32,omitempty"`
	F32         uint32                  `protobuf:"fixed32,11,opt,name=f32,proto3" json:"f32,omitempty"`
	U32         uint32                  `protobuf:"varint,12,opt,name=u32,proto3" json:"u32,omitempty"`
	Si32        int32                   `protobuf:"zigzag32,13,opt,name=si32,proto3" json:"si32,omitempty"`
	Sf32        int32                   `protobuf:"fixed32,14,opt,name=sf32,proto3" json:"sf32,omitempty"`
	I64         int64                   `protobuf:"varint,15,opt,name=i64,proto3" json:"i64,omitempty"`
	F64         uint64                  `protobuf:"fixed64,16,opt,name=f64,proto3" json:"f64,omitempty"`
	U64         uint64                  `protobuf:"varint,17,opt,name=u64,proto3" json:"u64,omitempty"`
	Si64        int64                   `protobuf:"zigzag64,18,opt,name=si64,proto3" json:"si64,omitempty"`
	Sf64        int64                   `protobuf:"fixed64,19,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Float       float32                 `protobuf:"fixed32,20,opt,name=float,proto3" json:"float,omitempty"`
	Double      float64                 `protobuf:"fixed64,21,opt,name=double,proto3" json:"double,omitempty"`
	Any         *anypb.Any              `protobuf:"bytes,22,opt,name=any,proto3" json:"any,omitempty"`
	Timestamp   *timestamppb.Timestamp  `protobuf:"bytes,23,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration    *durationpb.Duration    `protobuf:"bytes,24,opt,name=duration,proto3" json:"duration,omitempty"`
	Struct      *structpb.Struct        `protobuf:"bytes,25,opt,name=struct,proto3" json:"struct,omitempty"`
	BoolValue   *wrapperspb.BoolValue   `protobuf:"bytes,26,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	BytesValue  *wrapperspb.BytesValue  `protobuf:"bytes,27,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	DoubleValue *wrapperspb.DoubleValue `protobuf:"bytes,28,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue  *wrapperspb.FloatValue  `protobuf:"bytes,29,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value  *wrapperspb.Int32Value  `protobuf:"bytes,30,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value  *wrapperspb.Int64Value  `protobuf:"bytes,31,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	StringValue *wrapperspb.StringValue `protobuf:"bytes,32,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	Uint32Value *wrapperspb.UInt32Value `protobuf:"bytes,33,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value *wrapperspb.UInt64Value `protobuf:"bytes,34,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	FieldMask   *fieldmaskpb.FieldMask  `protobuf:"bytes,35,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	ListValue   *structpb.ListValue     `protobuf:"bytes,36,opt,name=list_value,json=listValue,proto3" json:"list_value,omitempty"`
	Value       *structpb.Value         `protobuf:"bytes,37,opt,name=value,proto3" json:"value,omitempty"`
	NullValue   structpb.NullValue      `protobuf:"varint,38,opt,name=null_value,json=nullValue,proto3,enum=google.protobuf.NullValue" json:"null_value,omitempty"`
	Empty       *emptypb.Empty          `protobuf:"bytes,39,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *ABitOfEverything) Reset() {
	*x = ABitOfEverything{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testpb_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABitOfEverything) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABitOfEverything) ProtoMessage() {}

// Deprecated: Use ABitOfEverything.ProtoReflect.Descriptor instead.
func (*ABitOfEverything) Descriptor() ([]byte, []int) {
	return file_testpb_test_proto_rawDescGZIP(), []int{0}
}

func (x *ABitOfEverything) GetMessage() *NestedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ABitOfEverything) GetEnum() AnEnum {
	if x != nil {
		return x.Enum
	}
	return AnEnum_UNDEFINED
}

func (x *ABitOfEverything) GetStrMap() map[string]string {
	if x != nil {
		return x.StrMap
	}
	return nil
}

func (x *ABitOfEverything) GetInt32Map() map[int32]string {
	if x != nil {
		return x.Int32Map
	}
	return nil
}

func (x *ABitOfEverything) GetBoolMap() map[bool]string {
	if x != nil {
		return x.BoolMap
	}
	return nil
}

func (x *ABitOfEverything) GetRepeated() []int32 {
	if x != nil {
		return x.Repeated
	}
	return nil
}

func (x *ABitOfEverything) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ABitOfEverything) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ABitOfEverything) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ABitOfEverything) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *ABitOfEverything) GetF32() uint32 {
	if x != nil {
		return x.F32
	}
	return 0
}

func (x *ABitOfEverything) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *ABitOfEverything) GetSi32() int32 {
	if x != nil {
		return x.Si32
	}
	return 0
}

func (x *ABitOfEverything) GetSf32() int32 {
	if x != nil {
		return x.Sf32
	}
	return 0
}

func (x *ABitOfEverything) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *ABitOfEverything) GetF64() uint64 {
	if x != nil {
		return x.F64
	}
	return 0
}

func (x *ABitOfEverything) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *ABitOfEverything) GetSi64() int64 {
	if x != nil {
		return x.Si64
	}
	return 0
}

func (x *ABitOfEverything) GetSf64() int64 {
	if x != nil {
		return x.Sf64
	}
	return 0
}

func (x *ABitOfEverything) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ABitOfEverything) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ABitOfEverything) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *ABitOfEverything) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ABitOfEverything) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ABitOfEverything) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *ABitOfEverything) GetBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *ABitOfEverything) GetBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ABitOfEverything) GetDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *ABitOfEverything) GetFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *ABitOfEverything) GetInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *ABitOfEverything) GetInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *ABitOfEverything) GetStringValue() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *ABitOfEverything) GetUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *ABitOfEverything) GetUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *ABitOfEverything) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ABitOfEverything) GetListValue() *structpb.ListValue {
	if x != nil {
		return x.ListValue
	}
	return nil
}

func (x *ABitOfEverything) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ABitOfEverything) GetNullValue() structpb.NullValue {
	if x != nil {
		return x.NullValue
	}
	return structpb.NullValue(0)
}

func (x *ABitOfEverything) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

type NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foo string `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
	Bar int32  `protobuf:"varint,2,opt,name=bar,proto3" json:"bar,omitempty"`
}

func (x *NestedMessage) Reset() {
	*x = NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testpb_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage) ProtoMessage() {}

// Deprecated: Use NestedMessage.ProtoReflect.Descriptor instead.
func (*NestedMessage) Descriptor() ([]byte, []int) {
	return file_testpb_test_proto_rawDescGZIP(), []int{1}
}

func (x *NestedMessage) GetFoo() string {
	if x != nil {
		return x.Foo
	}
	return ""
}

func (x *NestedMessage) GetBar() int32 {
	if x != nil {
		return x.Bar
	}
	return 0
}

var File_testpb_test_proto protoreflect.FileDescriptor

var file_testpb_test_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x0e, 0x0a, 0x10, 0x41, 0x42, 0x69, 0x74, 0x4f, 0x66, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x3d,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x42, 0x69, 0x74, 0x4f, 0x66, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x42, 0x69, 0x74, 0x4f, 0x66,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x12, 0x40, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x42,
	0x69, 0x74, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x33, 0x32,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x73, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x66, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x03, 0x66, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x36, 0x34, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x73, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66,
	0x36, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x10, 0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x03, 0x61, 0x6e, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33,
	0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x6f,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x62, 0x61, 0x72, 0x2a, 0x29, 0x0a, 0x06, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x42, 0x76,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x42, 0x09, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x25, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2f, 0x76, 0x32,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0xca,
	0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0xe2, 0x02, 0x12, 0x54, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06,
	0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testpb_test_proto_rawDescOnce sync.Once
	file_testpb_test_proto_rawDescData = file_testpb_test_proto_rawDesc
)

func file_testpb_test_proto_rawDescGZIP() []byte {
	file_testpb_test_proto_rawDescOnce.Do(func() {
		file_testpb_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_testpb_test_proto_rawDescData)
	})
	return file_testpb_test_proto_rawDescData
}

var file_testpb_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_testpb_test_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_testpb_test_proto_goTypes = []interface{}{
	(AnEnum)(0),                    // 0: testpb.AnEnum
	(*ABitOfEverything)(nil),       // 1: testpb.ABitOfEverything
	(*NestedMessage)(nil),          // 2: testpb.NestedMessage
	nil,                            // 3: testpb.ABitOfEverything.StrMapEntry
	nil,                            // 4: testpb.ABitOfEverything.Int32MapEntry
	nil,                            // 5: testpb.ABitOfEverything.BoolMapEntry
	(*anypb.Any)(nil),              // 6: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 8: google.protobuf.Duration
	(*structpb.Struct)(nil),        // 9: google.protobuf.Struct
	(*wrapperspb.BoolValue)(nil),   // 10: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),  // 11: google.protobuf.BytesValue
	(*wrapperspb.DoubleValue)(nil), // 12: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 13: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),  // 14: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 15: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil), // 16: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil), // 17: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 18: google.protobuf.UInt64Value
	(*fieldmaskpb.FieldMask)(nil),  // 19: google.protobuf.FieldMask
	(*structpb.ListValue)(nil),     // 20: google.protobuf.ListValue
	(*structpb.Value)(nil),         // 21: google.protobuf.Value
	(structpb.NullValue)(0),        // 22: google.protobuf.NullValue
	(*emptypb.Empty)(nil),          // 23: google.protobuf.Empty
}
var file_testpb_test_proto_depIdxs = []int32{
	2,  // 0: testpb.ABitOfEverything.message:type_name -> testpb.NestedMessage
	0,  // 1: testpb.ABitOfEverything.enum:type_name -> testpb.AnEnum
	3,  // 2: testpb.ABitOfEverything.str_map:type_name -> testpb.ABitOfEverything.StrMapEntry
	4,  // 3: testpb.ABitOfEverything.int32_map:type_name -> testpb.ABitOfEverything.Int32MapEntry
	5,  // 4: testpb.ABitOfEverything.bool_map:type_name -> testpb.ABitOfEverything.BoolMapEntry
	6,  // 5: testpb.ABitOfEverything.any:type_name -> google.protobuf.Any
	7,  // 6: testpb.ABitOfEverything.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 7: testpb.ABitOfEverything.duration:type_name -> google.protobuf.Duration
	9,  // 8: testpb.ABitOfEverything.struct:type_name -> google.protobuf.Struct
	10, // 9: testpb.ABitOfEverything.bool_value:type_name -> google.protobuf.BoolValue
	11, // 10: testpb.ABitOfEverything.bytes_value:type_name -> google.protobuf.BytesValue
	12, // 11: testpb.ABitOfEverything.double_value:type_name -> google.protobuf.DoubleValue
	13, // 12: testpb.ABitOfEverything.float_value:type_name -> google.protobuf.FloatValue
	14, // 13: testpb.ABitOfEverything.int32_value:type_name -> google.protobuf.Int32Value
	15, // 14: testpb.ABitOfEverything.int64_value:type_name -> google.protobuf.Int64Value
	16, // 15: testpb.ABitOfEverything.string_value:type_name -> google.protobuf.StringValue
	17, // 16: testpb.ABitOfEverything.uint32_value:type_name -> google.protobuf.UInt32Value
	18, // 17: testpb.ABitOfEverything.uint64_value:type_name -> google.protobuf.UInt64Value
	19, // 18: testpb.ABitOfEverything.field_mask:type_name -> google.protobuf.FieldMask
	20, // 19: testpb.ABitOfEverything.list_value:type_name -> google.protobuf.ListValue
	21, // 20: testpb.ABitOfEverything.value:type_name -> google.protobuf.Value
	22, // 21: testpb.ABitOfEverything.null_value:type_name -> google.protobuf.NullValue
	23, // 22: testpb.ABitOfEverything.empty:type_name -> google.protobuf.Empty
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_testpb_test_proto_init() }
func file_testpb_test_proto_init() {
	if File_testpb_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testpb_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABitOfEverything); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testpb_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testpb_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testpb_test_proto_goTypes,
		DependencyIndexes: file_testpb_test_proto_depIdxs,
		EnumInfos:         file_testpb_test_proto_enumTypes,
		MessageInfos:      file_testpb_test_proto_msgTypes,
	}.Build()
	File_testpb_test_proto = out.File
	file_testpb_test_proto_rawDesc = nil
	file_testpb_test_proto_goTypes = nil
	file_testpb_test_proto_depIdxs = nil
}
