// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cosmos/authn/v1/state_query.proto

package authnv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateQueryClient is the client API for StateQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateQueryClient interface {
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error)
	ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	GetAccountSequence(ctx context.Context, in *GetAccountSequenceRequest, opts ...grpc.CallOption) (*GetAccountSequenceResponse, error)
	ListAccountSequence(ctx context.Context, in *ListAccountSequenceRequest, opts ...grpc.CallOption) (*ListAccountSequenceResponse, error)
}

type stateQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewStateQueryClient(cc grpc.ClientConnInterface) StateQueryClient {
	return &stateQueryClient{cc}
}

func (c *stateQueryClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authn.v1.StateQuery/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryClient) GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error) {
	out := new(GetAccountByAddressResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authn.v1.StateQuery/GetAccountByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryClient) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authn.v1.StateQuery/ListAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryClient) GetAccountSequence(ctx context.Context, in *GetAccountSequenceRequest, opts ...grpc.CallOption) (*GetAccountSequenceResponse, error) {
	out := new(GetAccountSequenceResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authn.v1.StateQuery/GetAccountSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryClient) ListAccountSequence(ctx context.Context, in *ListAccountSequenceRequest, opts ...grpc.CallOption) (*ListAccountSequenceResponse, error) {
	out := new(ListAccountSequenceResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authn.v1.StateQuery/ListAccountSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServer is the server API for StateQuery service.
// All implementations must embed UnimplementedStateQueryServer
// for forward compatibility
type StateQueryServer interface {
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error)
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	GetAccountSequence(context.Context, *GetAccountSequenceRequest) (*GetAccountSequenceResponse, error)
	ListAccountSequence(context.Context, *ListAccountSequenceRequest) (*ListAccountSequenceResponse, error)
	mustEmbedUnimplementedStateQueryServer()
}

// UnimplementedStateQueryServer must be embedded to have forward compatible implementations.
type UnimplementedStateQueryServer struct {
}

func (UnimplementedStateQueryServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedStateQueryServer) GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAddress not implemented")
}
func (UnimplementedStateQueryServer) ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccount not implemented")
}
func (UnimplementedStateQueryServer) GetAccountSequence(context.Context, *GetAccountSequenceRequest) (*GetAccountSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSequence not implemented")
}
func (UnimplementedStateQueryServer) ListAccountSequence(context.Context, *ListAccountSequenceRequest) (*ListAccountSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountSequence not implemented")
}
func (UnimplementedStateQueryServer) mustEmbedUnimplementedStateQueryServer() {}

// UnsafeStateQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateQueryServer will
// result in compilation errors.
type UnsafeStateQueryServer interface {
	mustEmbedUnimplementedStateQueryServer()
}

func RegisterStateQueryServer(s grpc.ServiceRegistrar, srv StateQueryServer) {
	s.RegisterService(&StateQuery_ServiceDesc, srv)
}

func _StateQuery_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authn.v1.StateQuery/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQuery_GetAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServer).GetAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authn.v1.StateQuery/GetAccountByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServer).GetAccountByAddress(ctx, req.(*GetAccountByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQuery_ListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServer).ListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authn.v1.StateQuery/ListAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServer).ListAccount(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQuery_GetAccountSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServer).GetAccountSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authn.v1.StateQuery/GetAccountSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServer).GetAccountSequence(ctx, req.(*GetAccountSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQuery_ListAccountSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServer).ListAccountSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authn.v1.StateQuery/ListAccountSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServer).ListAccountSequence(ctx, req.(*ListAccountSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateQuery_ServiceDesc is the grpc.ServiceDesc for StateQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.authn.v1.StateQuery",
	HandlerType: (*StateQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _StateQuery_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountByAddress",
			Handler:    _StateQuery_GetAccountByAddress_Handler,
		},
		{
			MethodName: "ListAccount",
			Handler:    _StateQuery_ListAccount_Handler,
		},
		{
			MethodName: "GetAccountSequence",
			Handler:    _StateQuery_GetAccountSequence_Handler,
		},
		{
			MethodName: "ListAccountSequence",
			Handler:    _StateQuery_ListAccountSequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/authn/v1/state_query.proto",
}
