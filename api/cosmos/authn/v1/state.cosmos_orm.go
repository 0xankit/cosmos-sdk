// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package authnv1

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type AccountView interface {
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Account, error)
	HasByAddress(ctx context.Context, address []byte) (found bool, err error)
	// GetByAddress returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByAddress(ctx context.Context, address []byte) (*Account, error)
	List(ctx context.Context, prefixKey AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error)
	ListRange(ctx context.Context, from, to AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error)

	doNotImplement()
}

type AccountTable interface {
	AccountView
	Insert(ctx context.Context, account *Account) error
	InsertReturningId(ctx context.Context, account *Account) (uint64, error)
	Update(ctx context.Context, account *Account) error
	Save(ctx context.Context, account *Account) error
	Delete(ctx context.Context, account *Account) error
	DeleteBy(ctx context.Context, prefixKey AccountIndexKey) error
	DeleteRange(ctx context.Context, from, to AccountIndexKey) error

	doNotImplement()
}

type AccountIterator struct {
	ormtable.Iterator
}

func (i AccountIterator) Value() (*Account, error) {
	var account Account
	err := i.UnmarshalMessage(&account)
	return &account, err
}

type AccountIndexKey interface {
	id() uint32
	values() []interface{}
	accountIndexKey()
}

// primary key starting index..
type AccountPrimaryKey = AccountIdIndexKey

type AccountIdIndexKey struct {
	vs []interface{}
}

func (x AccountIdIndexKey) id() uint32            { return 0 }
func (x AccountIdIndexKey) values() []interface{} { return x.vs }
func (x AccountIdIndexKey) accountIndexKey()      {}

func (this AccountIdIndexKey) WithId(id uint64) AccountIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type AccountAddressIndexKey struct {
	vs []interface{}
}

func (x AccountAddressIndexKey) id() uint32            { return 1 }
func (x AccountAddressIndexKey) values() []interface{} { return x.vs }
func (x AccountAddressIndexKey) accountIndexKey()      {}

func (this AccountAddressIndexKey) WithAddress(address []byte) AccountAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type accountView struct {
	view ormtable.View
}

type accountTable struct {
	accountView
	table ormtable.AutoIncrementTable
}

func (this accountTable) Insert(ctx context.Context, account *Account) error {
	return this.table.Insert(ctx, account)
}

func (this accountTable) Update(ctx context.Context, account *Account) error {
	return this.table.Update(ctx, account)
}

func (this accountTable) Save(ctx context.Context, account *Account) error {
	return this.table.Save(ctx, account)
}

func (this accountTable) Delete(ctx context.Context, account *Account) error {
	return this.table.Delete(ctx, account)
}

func (this accountTable) InsertReturningId(ctx context.Context, account *Account) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, account)
}

func (this accountView) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, id)
}

func (this accountView) Get(ctx context.Context, id uint64) (*Account, error) {
	var account Account
	found, err := this.view.PrimaryKey().Get(ctx, &account, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &account, nil
}

func (this accountView) HasByAddress(ctx context.Context, address []byte) (found bool, err error) {
	return this.view.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		address,
	)
}

func (this accountView) GetByAddress(ctx context.Context, address []byte) (*Account, error) {
	var account Account
	found, err := this.view.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &account,
		address,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &account, nil
}

func (this accountView) List(ctx context.Context, prefixKey AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AccountIterator{it}, err
}

func (this accountView) ListRange(ctx context.Context, from, to AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AccountIterator{it}, err
}

func (this accountTable) DeleteBy(ctx context.Context, prefixKey AccountIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this accountTable) DeleteRange(ctx context.Context, from, to AccountIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this accountView) doNotImplement()  {}
func (this accountTable) doNotImplement() {}

var _ AccountView = accountView{}
var _ AccountTable = accountTable{}

func NewAccountView(db ormtable.Schema) (AccountView, error) {
	view := db.GetTable(&Account{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Account{}).ProtoReflect().Descriptor().FullName()))
	}
	return accountView{view: view}, nil
}

func NewAccountTable(db ormtable.Schema) (AccountTable, error) {
	table := db.GetTable(&Account{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Account{}).ProtoReflect().Descriptor().FullName()))
	}
	return accountTable{
		table:       table.(ormtable.AutoIncrementTable),
		accountView: accountView{view: table},
	}, nil
}

type AccountSequenceView interface {
	Has(ctx context.Context, address []byte) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address []byte) (*AccountSequence, error)
	List(ctx context.Context, prefixKey AccountSequenceIndexKey, opts ...ormlist.Option) (AccountSequenceIterator, error)
	ListRange(ctx context.Context, from, to AccountSequenceIndexKey, opts ...ormlist.Option) (AccountSequenceIterator, error)

	doNotImplement()
}

type AccountSequenceTable interface {
	AccountSequenceView
	Insert(ctx context.Context, accountSequence *AccountSequence) error
	Update(ctx context.Context, accountSequence *AccountSequence) error
	Save(ctx context.Context, accountSequence *AccountSequence) error
	Delete(ctx context.Context, accountSequence *AccountSequence) error
	DeleteBy(ctx context.Context, prefixKey AccountSequenceIndexKey) error
	DeleteRange(ctx context.Context, from, to AccountSequenceIndexKey) error

	doNotImplement()
}

type AccountSequenceIterator struct {
	ormtable.Iterator
}

func (i AccountSequenceIterator) Value() (*AccountSequence, error) {
	var accountSequence AccountSequence
	err := i.UnmarshalMessage(&accountSequence)
	return &accountSequence, err
}

type AccountSequenceIndexKey interface {
	id() uint32
	values() []interface{}
	accountSequenceIndexKey()
}

// primary key starting index..
type AccountSequencePrimaryKey = AccountSequenceAddressIndexKey

type AccountSequenceAddressIndexKey struct {
	vs []interface{}
}

func (x AccountSequenceAddressIndexKey) id() uint32               { return 0 }
func (x AccountSequenceAddressIndexKey) values() []interface{}    { return x.vs }
func (x AccountSequenceAddressIndexKey) accountSequenceIndexKey() {}

func (this AccountSequenceAddressIndexKey) WithAddress(address []byte) AccountSequenceAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type accountSequenceView struct {
	view ormtable.View
}

type accountSequenceTable struct {
	accountSequenceView
	table ormtable.Table
}

func (this accountSequenceTable) Insert(ctx context.Context, accountSequence *AccountSequence) error {
	return this.table.Insert(ctx, accountSequence)
}

func (this accountSequenceTable) Update(ctx context.Context, accountSequence *AccountSequence) error {
	return this.table.Update(ctx, accountSequence)
}

func (this accountSequenceTable) Save(ctx context.Context, accountSequence *AccountSequence) error {
	return this.table.Save(ctx, accountSequence)
}

func (this accountSequenceTable) Delete(ctx context.Context, accountSequence *AccountSequence) error {
	return this.table.Delete(ctx, accountSequence)
}

func (this accountSequenceView) Has(ctx context.Context, address []byte) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, address)
}

func (this accountSequenceView) Get(ctx context.Context, address []byte) (*AccountSequence, error) {
	var accountSequence AccountSequence
	found, err := this.view.PrimaryKey().Get(ctx, &accountSequence, address)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &accountSequence, nil
}

func (this accountSequenceView) List(ctx context.Context, prefixKey AccountSequenceIndexKey, opts ...ormlist.Option) (AccountSequenceIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AccountSequenceIterator{it}, err
}

func (this accountSequenceView) ListRange(ctx context.Context, from, to AccountSequenceIndexKey, opts ...ormlist.Option) (AccountSequenceIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AccountSequenceIterator{it}, err
}

func (this accountSequenceTable) DeleteBy(ctx context.Context, prefixKey AccountSequenceIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this accountSequenceTable) DeleteRange(ctx context.Context, from, to AccountSequenceIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this accountSequenceView) doNotImplement()  {}
func (this accountSequenceTable) doNotImplement() {}

var _ AccountSequenceView = accountSequenceView{}
var _ AccountSequenceTable = accountSequenceTable{}

func NewAccountSequenceView(db ormtable.Schema) (AccountSequenceView, error) {
	view := db.GetTable(&AccountSequence{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AccountSequence{}).ProtoReflect().Descriptor().FullName()))
	}
	return accountSequenceView{view: view}, nil
}

func NewAccountSequenceTable(db ormtable.Schema) (AccountSequenceTable, error) {
	table := db.GetTable(&AccountSequence{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AccountSequence{}).ProtoReflect().Descriptor().FullName()))
	}
	return accountSequenceTable{
		table:               table,
		accountSequenceView: accountSequenceView{view: table},
	}, nil
}

type StateView interface {
	AccountView() AccountView
	AccountSequenceView() AccountSequenceView

	doNotImplement()
}

type StateStore interface {
	StateView
	AccountTable() AccountTable
	AccountSequenceTable() AccountSequenceTable

	doNotImplement()
}

type stateView struct {
	account         AccountView
	accountSequence AccountSequenceView
}
type stateStore struct {
	stateView
	account         AccountTable
	accountSequence AccountSequenceTable
}

func (x stateView) AccountView() AccountView {
	return x.account
}

func (x stateView) AccountSequenceView() AccountSequenceView {
	return x.accountSequence
}

func (stateView) doNotImplement() {}

func (x stateStore) AccountTable() AccountTable {
	return x.account
}

func (x stateStore) AccountSequenceTable() AccountSequenceTable {
	return x.accountSequence
}

func (stateStore) doNotImplement() {}

var _ StateView = stateView{}
var _ StateStore = stateStore{}

func NewStateView(db ormtable.Schema) (StateView, error) {
	accountView, err := NewAccountView(db)
	if err != nil {
		return nil, err
	}

	accountSequenceView, err := NewAccountSequenceView(db)
	if err != nil {
		return nil, err
	}

	return stateView{
		accountView,
		accountSequenceView,
	}, nil
}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	accountTable, err := NewAccountTable(db)
	if err != nil {
		return nil, err
	}

	accountSequenceTable, err := NewAccountSequenceTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		stateView{
			accountTable,
			accountSequenceTable,
		},
		accountTable,
		accountSequenceTable,
	}, nil
}
