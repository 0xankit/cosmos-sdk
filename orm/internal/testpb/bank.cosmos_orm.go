// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package testpb

import (
	context "context"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type BalanceTable interface {
	ormtable.GenericTable[*Balance, BalanceIndexKey]
	Has(ctx context.Context, address string, denom string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address string, denom string) (*Balance, error)

	doNotImplement()
}

type BalanceIterator struct {
	ormtable.Iterator
}

func (i BalanceIterator) Value() (*Balance, error) {
	var balance Balance
	err := i.UnmarshalMessage(&balance)
	return &balance, err
}

type BalanceIndexKey interface {
	ormtable.GenericIndexKey
	balanceIndexKey()
}

// primary key starting index..
type BalancePrimaryKey = BalanceAddressDenomIndexKey

type BalanceAddressDenomIndexKey struct {
	vs []interface{}
}

func (x BalanceAddressDenomIndexKey) IndexId() uint32          { return 0 }
func (x BalanceAddressDenomIndexKey) KeyValues() []interface{} { return x.vs }
func (x BalanceAddressDenomIndexKey) balanceIndexKey()         {}

func (this BalanceAddressDenomIndexKey) WithAddress(address string) BalanceAddressDenomIndexKey {
	this.vs = []interface{}{address}
	return this
}

func (this BalanceAddressDenomIndexKey) WithAddressDenom(address string, denom string) BalanceAddressDenomIndexKey {
	this.vs = []interface{}{address, denom}
	return this
}

type BalanceDenomIndexKey struct {
	vs []interface{}
}

func (x BalanceDenomIndexKey) IndexId() uint32          { return 1 }
func (x BalanceDenomIndexKey) KeyValues() []interface{} { return x.vs }
func (x BalanceDenomIndexKey) balanceIndexKey()         {}

func (this BalanceDenomIndexKey) WithDenom(denom string) BalanceDenomIndexKey {
	this.vs = []interface{}{denom}
	return this
}

type balanceTable struct {
	ormtable.GenericTable[*Balance, BalanceIndexKey]
}

func (this balanceTable) Has(ctx context.Context, address string, denom string) (found bool, err error) {
	return this.DynamicTable().PrimaryKey().Has(ctx, address, denom)
}

func (this balanceTable) Get(ctx context.Context, address string, denom string) (*Balance, error) {
	var balance Balance
	found, err := this.DynamicTable().PrimaryKey().Get(ctx, &balance, address, denom)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &balance, nil
}

func (this balanceTable) doNotImplement() {}

var _ BalanceTable = balanceTable{}

func NewBalanceTable(db ormtable.Schema) (BalanceTable, error) {
	table := db.GetTable(&Balance{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Balance{}).ProtoReflect().Descriptor().FullName()))
	}
	return balanceTable{ormtable.NewGenericTable[*Balance, BalanceIndexKey](table)}, nil
}

type SupplyTable interface {
	ormtable.GenericTable[*Supply, SupplyIndexKey]
	Has(ctx context.Context, denom string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, denom string) (*Supply, error)

	doNotImplement()
}

type SupplyIterator struct {
	ormtable.Iterator
}

func (i SupplyIterator) Value() (*Supply, error) {
	var supply Supply
	err := i.UnmarshalMessage(&supply)
	return &supply, err
}

type SupplyIndexKey interface {
	ormtable.GenericIndexKey
	supplyIndexKey()
}

// primary key starting index..
type SupplyPrimaryKey = SupplyDenomIndexKey

type SupplyDenomIndexKey struct {
	vs []interface{}
}

func (x SupplyDenomIndexKey) IndexId() uint32          { return 0 }
func (x SupplyDenomIndexKey) KeyValues() []interface{} { return x.vs }
func (x SupplyDenomIndexKey) supplyIndexKey()          {}

func (this SupplyDenomIndexKey) WithDenom(denom string) SupplyDenomIndexKey {
	this.vs = []interface{}{denom}
	return this
}

type supplyTable struct {
	ormtable.GenericTable[*Supply, SupplyIndexKey]
}

func (this supplyTable) Has(ctx context.Context, denom string) (found bool, err error) {
	return this.DynamicTable().PrimaryKey().Has(ctx, denom)
}

func (this supplyTable) Get(ctx context.Context, denom string) (*Supply, error) {
	var supply Supply
	found, err := this.DynamicTable().PrimaryKey().Get(ctx, &supply, denom)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &supply, nil
}

func (this supplyTable) doNotImplement() {}

var _ SupplyTable = supplyTable{}

func NewSupplyTable(db ormtable.Schema) (SupplyTable, error) {
	table := db.GetTable(&Supply{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Supply{}).ProtoReflect().Descriptor().FullName()))
	}
	return supplyTable{ormtable.NewGenericTable[*Supply, SupplyIndexKey](table)}, nil
}

type BankStore interface {
	BalanceTable() BalanceTable
	SupplyTable() SupplyTable

	doNotImplement()
}

type bankStore struct {
	balance BalanceTable
	supply  SupplyTable
}

func (x bankStore) BalanceTable() BalanceTable {
	return x.balance
}

func (x bankStore) SupplyTable() SupplyTable {
	return x.supply
}

func (bankStore) doNotImplement() {}

var _ BankStore = bankStore{}

func NewBankStore(db ormtable.Schema) (BankStore, error) {
	balanceTable, err := NewBalanceTable(db)
	if err != nil {
		return nil, err
	}

	supplyTable, err := NewSupplyTable(db)
	if err != nil {
		return nil, err
	}

	return bankStore{
		balanceTable,
		supplyTable,
	}, nil
}
