// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package testpb

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type ExampleTableView interface {
	Has(ctx context.Context, u32 uint32, i64 int64, str string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, u32 uint32, i64 int64, str string) (*ExampleTable, error)
	HasByU64Str(ctx context.Context, u64 uint64, str string) (found bool, err error)
	// GetByU64Str returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByU64Str(ctx context.Context, u64 uint64, str string) (*ExampleTable, error)
	List(ctx context.Context, prefixKey ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error)
	ListRange(ctx context.Context, from, to ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error)

	doNotImplement()
}

type ExampleTableTable interface {
	ExampleTableView
	Insert(ctx context.Context, exampleTable *ExampleTable) error
	Update(ctx context.Context, exampleTable *ExampleTable) error
	Save(ctx context.Context, exampleTable *ExampleTable) error
	Delete(ctx context.Context, exampleTable *ExampleTable) error
	DeleteBy(ctx context.Context, prefixKey ExampleTableIndexKey) error
	DeleteRange(ctx context.Context, from, to ExampleTableIndexKey) error

	doNotImplement()
}

type ExampleTableIterator struct {
	ormtable.Iterator
}

func (i ExampleTableIterator) Value() (*ExampleTable, error) {
	var exampleTable ExampleTable
	err := i.UnmarshalMessage(&exampleTable)
	return &exampleTable, err
}

type ExampleTableIndexKey interface {
	id() uint32
	values() []interface{}
	exampleTableIndexKey()
}

// primary key starting index..
type ExampleTablePrimaryKey = ExampleTableU32I64StrIndexKey

type ExampleTableU32I64StrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableU32I64StrIndexKey) id() uint32            { return 0 }
func (x ExampleTableU32I64StrIndexKey) values() []interface{} { return x.vs }
func (x ExampleTableU32I64StrIndexKey) exampleTableIndexKey() {}

func (this ExampleTableU32I64StrIndexKey) WithU32(u32 uint32) ExampleTableU32I64StrIndexKey {
	this.vs = []interface{}{u32}
	return this
}

func (this ExampleTableU32I64StrIndexKey) WithU32I64(u32 uint32, i64 int64) ExampleTableU32I64StrIndexKey {
	this.vs = []interface{}{u32, i64}
	return this
}

func (this ExampleTableU32I64StrIndexKey) WithU32I64Str(u32 uint32, i64 int64, str string) ExampleTableU32I64StrIndexKey {
	this.vs = []interface{}{u32, i64, str}
	return this
}

type ExampleTableU64StrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableU64StrIndexKey) id() uint32            { return 1 }
func (x ExampleTableU64StrIndexKey) values() []interface{} { return x.vs }
func (x ExampleTableU64StrIndexKey) exampleTableIndexKey() {}

func (this ExampleTableU64StrIndexKey) WithU64(u64 uint64) ExampleTableU64StrIndexKey {
	this.vs = []interface{}{u64}
	return this
}

func (this ExampleTableU64StrIndexKey) WithU64Str(u64 uint64, str string) ExampleTableU64StrIndexKey {
	this.vs = []interface{}{u64, str}
	return this
}

type ExampleTableStrU32IndexKey struct {
	vs []interface{}
}

func (x ExampleTableStrU32IndexKey) id() uint32            { return 2 }
func (x ExampleTableStrU32IndexKey) values() []interface{} { return x.vs }
func (x ExampleTableStrU32IndexKey) exampleTableIndexKey() {}

func (this ExampleTableStrU32IndexKey) WithStr(str string) ExampleTableStrU32IndexKey {
	this.vs = []interface{}{str}
	return this
}

func (this ExampleTableStrU32IndexKey) WithStrU32(str string, u32 uint32) ExampleTableStrU32IndexKey {
	this.vs = []interface{}{str, u32}
	return this
}

type ExampleTableBzStrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableBzStrIndexKey) id() uint32            { return 3 }
func (x ExampleTableBzStrIndexKey) values() []interface{} { return x.vs }
func (x ExampleTableBzStrIndexKey) exampleTableIndexKey() {}

func (this ExampleTableBzStrIndexKey) WithBz(bz []byte) ExampleTableBzStrIndexKey {
	this.vs = []interface{}{bz}
	return this
}

func (this ExampleTableBzStrIndexKey) WithBzStr(bz []byte, str string) ExampleTableBzStrIndexKey {
	this.vs = []interface{}{bz, str}
	return this
}

type exampleTableView struct {
	view ormtable.View
}

type exampleTableTable struct {
	exampleTableView
	table ormtable.Table
}

func (this exampleTableTable) Insert(ctx context.Context, exampleTable *ExampleTable) error {
	return this.table.Insert(ctx, exampleTable)
}

func (this exampleTableTable) Update(ctx context.Context, exampleTable *ExampleTable) error {
	return this.table.Update(ctx, exampleTable)
}

func (this exampleTableTable) Save(ctx context.Context, exampleTable *ExampleTable) error {
	return this.table.Save(ctx, exampleTable)
}

func (this exampleTableTable) Delete(ctx context.Context, exampleTable *ExampleTable) error {
	return this.table.Delete(ctx, exampleTable)
}

func (this exampleTableView) Has(ctx context.Context, u32 uint32, i64 int64, str string) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, u32, i64, str)
}

func (this exampleTableView) Get(ctx context.Context, u32 uint32, i64 int64, str string) (*ExampleTable, error) {
	var exampleTable ExampleTable
	found, err := this.view.PrimaryKey().Get(ctx, &exampleTable, u32, i64, str)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleTable, nil
}

func (this exampleTableView) HasByU64Str(ctx context.Context, u64 uint64, str string) (found bool, err error) {
	return this.view.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		u64,
		str,
	)
}

func (this exampleTableView) GetByU64Str(ctx context.Context, u64 uint64, str string) (*ExampleTable, error) {
	var exampleTable ExampleTable
	found, err := this.view.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &exampleTable,
		u64,
		str,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleTable, nil
}

func (this exampleTableView) List(ctx context.Context, prefixKey ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ExampleTableIterator{it}, err
}

func (this exampleTableView) ListRange(ctx context.Context, from, to ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ExampleTableIterator{it}, err
}

func (this exampleTableTable) DeleteBy(ctx context.Context, prefixKey ExampleTableIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this exampleTableTable) DeleteRange(ctx context.Context, from, to ExampleTableIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this exampleTableView) doNotImplement()  {}
func (this exampleTableTable) doNotImplement() {}

var _ ExampleTableView = exampleTableView{}
var _ ExampleTableTable = exampleTableTable{}

func NewExampleTableView(db ormtable.Schema) (ExampleTableView, error) {
	view := db.GetTable(&ExampleTable{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTableView{view: view}, nil
}

func NewExampleTableTable(db ormtable.Schema) (ExampleTableTable, error) {
	table := db.GetTable(&ExampleTable{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTableTable{
		table:            table,
		exampleTableView: exampleTableView{view: table},
	}, nil
}

type ExampleAutoIncrementTableView interface {
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*ExampleAutoIncrementTable, error)
	HasByX(ctx context.Context, x string) (found bool, err error)
	// GetByX returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByX(ctx context.Context, x string) (*ExampleAutoIncrementTable, error)
	List(ctx context.Context, prefixKey ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error)
	ListRange(ctx context.Context, from, to ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error)

	doNotImplement()
}

type ExampleAutoIncrementTableTable interface {
	ExampleAutoIncrementTableView
	Insert(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	InsertReturningId(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) (uint64, error)
	Update(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	Save(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	Delete(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	DeleteBy(ctx context.Context, prefixKey ExampleAutoIncrementTableIndexKey) error
	DeleteRange(ctx context.Context, from, to ExampleAutoIncrementTableIndexKey) error

	doNotImplement()
}

type ExampleAutoIncrementTableIterator struct {
	ormtable.Iterator
}

func (i ExampleAutoIncrementTableIterator) Value() (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	err := i.UnmarshalMessage(&exampleAutoIncrementTable)
	return &exampleAutoIncrementTable, err
}

type ExampleAutoIncrementTableIndexKey interface {
	id() uint32
	values() []interface{}
	exampleAutoIncrementTableIndexKey()
}

// primary key starting index..
type ExampleAutoIncrementTablePrimaryKey = ExampleAutoIncrementTableIdIndexKey

type ExampleAutoIncrementTableIdIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncrementTableIdIndexKey) id() uint32                         { return 0 }
func (x ExampleAutoIncrementTableIdIndexKey) values() []interface{}              { return x.vs }
func (x ExampleAutoIncrementTableIdIndexKey) exampleAutoIncrementTableIndexKey() {}

func (this ExampleAutoIncrementTableIdIndexKey) WithId(id uint64) ExampleAutoIncrementTableIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ExampleAutoIncrementTableXIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncrementTableXIndexKey) id() uint32                         { return 1 }
func (x ExampleAutoIncrementTableXIndexKey) values() []interface{}              { return x.vs }
func (x ExampleAutoIncrementTableXIndexKey) exampleAutoIncrementTableIndexKey() {}

func (this ExampleAutoIncrementTableXIndexKey) WithX(x string) ExampleAutoIncrementTableXIndexKey {
	this.vs = []interface{}{x}
	return this
}

type exampleAutoIncrementTableView struct {
	view ormtable.View
}

type exampleAutoIncrementTableTable struct {
	exampleAutoIncrementTableView
	table ormtable.AutoIncrementTable
}

func (this exampleAutoIncrementTableTable) Insert(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return this.table.Insert(ctx, exampleAutoIncrementTable)
}

func (this exampleAutoIncrementTableTable) Update(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return this.table.Update(ctx, exampleAutoIncrementTable)
}

func (this exampleAutoIncrementTableTable) Save(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return this.table.Save(ctx, exampleAutoIncrementTable)
}

func (this exampleAutoIncrementTableTable) Delete(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return this.table.Delete(ctx, exampleAutoIncrementTable)
}

func (this exampleAutoIncrementTableTable) InsertReturningId(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, exampleAutoIncrementTable)
}

func (this exampleAutoIncrementTableView) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, id)
}

func (this exampleAutoIncrementTableView) Get(ctx context.Context, id uint64) (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	found, err := this.view.PrimaryKey().Get(ctx, &exampleAutoIncrementTable, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleAutoIncrementTable, nil
}

func (this exampleAutoIncrementTableView) HasByX(ctx context.Context, x string) (found bool, err error) {
	return this.view.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		x,
	)
}

func (this exampleAutoIncrementTableView) GetByX(ctx context.Context, x string) (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	found, err := this.view.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &exampleAutoIncrementTable,
		x,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleAutoIncrementTable, nil
}

func (this exampleAutoIncrementTableView) List(ctx context.Context, prefixKey ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ExampleAutoIncrementTableIterator{it}, err
}

func (this exampleAutoIncrementTableView) ListRange(ctx context.Context, from, to ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ExampleAutoIncrementTableIterator{it}, err
}

func (this exampleAutoIncrementTableTable) DeleteBy(ctx context.Context, prefixKey ExampleAutoIncrementTableIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this exampleAutoIncrementTableTable) DeleteRange(ctx context.Context, from, to ExampleAutoIncrementTableIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this exampleAutoIncrementTableView) doNotImplement()  {}
func (this exampleAutoIncrementTableTable) doNotImplement() {}

var _ ExampleAutoIncrementTableView = exampleAutoIncrementTableView{}
var _ ExampleAutoIncrementTableTable = exampleAutoIncrementTableTable{}

func NewExampleAutoIncrementTableView(db ormtable.Schema) (ExampleAutoIncrementTableView, error) {
	view := db.GetTable(&ExampleAutoIncrementTable{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleAutoIncrementTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleAutoIncrementTableView{view: view}, nil
}

func NewExampleAutoIncrementTableTable(db ormtable.Schema) (ExampleAutoIncrementTableTable, error) {
	table := db.GetTable(&ExampleAutoIncrementTable{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleAutoIncrementTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleAutoIncrementTableTable{
		table:                         table.(ormtable.AutoIncrementTable),
		exampleAutoIncrementTableView: exampleAutoIncrementTableView{view: table},
	}, nil
}

// singleton store
type ExampleSingletonTable interface {
	Get(ctx context.Context) (*ExampleSingleton, error)
	Save(ctx context.Context, exampleSingleton *ExampleSingleton) error
}

type exampleSingletonTable struct {
	table ormtable.Table
}

var _ ExampleSingletonTable = exampleSingletonTable{}

func (x exampleSingletonTable) Get(ctx context.Context) (*ExampleSingleton, error) {
	exampleSingleton := &ExampleSingleton{}
	_, err := x.table.Get(ctx, exampleSingleton)
	return exampleSingleton, err
}

func (x exampleSingletonTable) Save(ctx context.Context, exampleSingleton *ExampleSingleton) error {
	return x.table.Save(ctx, exampleSingleton)
}

func NewExampleSingletonTable(db ormtable.Schema) (ExampleSingletonTable, error) {
	table := db.GetTable(&ExampleSingleton{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleSingleton{}).ProtoReflect().Descriptor().FullName()))
	}
	return &exampleSingletonTable{table}, nil
}

type ExampleTimestampView interface {
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*ExampleTimestamp, error)
	List(ctx context.Context, prefixKey ExampleTimestampIndexKey, opts ...ormlist.Option) (ExampleTimestampIterator, error)
	ListRange(ctx context.Context, from, to ExampleTimestampIndexKey, opts ...ormlist.Option) (ExampleTimestampIterator, error)

	doNotImplement()
}

type ExampleTimestampTable interface {
	ExampleTimestampView
	Insert(ctx context.Context, exampleTimestamp *ExampleTimestamp) error
	InsertReturningId(ctx context.Context, exampleTimestamp *ExampleTimestamp) (uint64, error)
	Update(ctx context.Context, exampleTimestamp *ExampleTimestamp) error
	Save(ctx context.Context, exampleTimestamp *ExampleTimestamp) error
	Delete(ctx context.Context, exampleTimestamp *ExampleTimestamp) error
	DeleteBy(ctx context.Context, prefixKey ExampleTimestampIndexKey) error
	DeleteRange(ctx context.Context, from, to ExampleTimestampIndexKey) error

	doNotImplement()
}

type ExampleTimestampIterator struct {
	ormtable.Iterator
}

func (i ExampleTimestampIterator) Value() (*ExampleTimestamp, error) {
	var exampleTimestamp ExampleTimestamp
	err := i.UnmarshalMessage(&exampleTimestamp)
	return &exampleTimestamp, err
}

type ExampleTimestampIndexKey interface {
	id() uint32
	values() []interface{}
	exampleTimestampIndexKey()
}

// primary key starting index..
type ExampleTimestampPrimaryKey = ExampleTimestampIdIndexKey

type ExampleTimestampIdIndexKey struct {
	vs []interface{}
}

func (x ExampleTimestampIdIndexKey) id() uint32                { return 0 }
func (x ExampleTimestampIdIndexKey) values() []interface{}     { return x.vs }
func (x ExampleTimestampIdIndexKey) exampleTimestampIndexKey() {}

func (this ExampleTimestampIdIndexKey) WithId(id uint64) ExampleTimestampIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ExampleTimestampTsIndexKey struct {
	vs []interface{}
}

func (x ExampleTimestampTsIndexKey) id() uint32                { return 1 }
func (x ExampleTimestampTsIndexKey) values() []interface{}     { return x.vs }
func (x ExampleTimestampTsIndexKey) exampleTimestampIndexKey() {}

func (this ExampleTimestampTsIndexKey) WithTs(ts *timestamppb.Timestamp) ExampleTimestampTsIndexKey {
	this.vs = []interface{}{ts}
	return this
}

type exampleTimestampView struct {
	view ormtable.View
}

type exampleTimestampTable struct {
	exampleTimestampView
	table ormtable.AutoIncrementTable
}

func (this exampleTimestampTable) Insert(ctx context.Context, exampleTimestamp *ExampleTimestamp) error {
	return this.table.Insert(ctx, exampleTimestamp)
}

func (this exampleTimestampTable) Update(ctx context.Context, exampleTimestamp *ExampleTimestamp) error {
	return this.table.Update(ctx, exampleTimestamp)
}

func (this exampleTimestampTable) Save(ctx context.Context, exampleTimestamp *ExampleTimestamp) error {
	return this.table.Save(ctx, exampleTimestamp)
}

func (this exampleTimestampTable) Delete(ctx context.Context, exampleTimestamp *ExampleTimestamp) error {
	return this.table.Delete(ctx, exampleTimestamp)
}

func (this exampleTimestampTable) InsertReturningId(ctx context.Context, exampleTimestamp *ExampleTimestamp) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, exampleTimestamp)
}

func (this exampleTimestampView) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, id)
}

func (this exampleTimestampView) Get(ctx context.Context, id uint64) (*ExampleTimestamp, error) {
	var exampleTimestamp ExampleTimestamp
	found, err := this.view.PrimaryKey().Get(ctx, &exampleTimestamp, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleTimestamp, nil
}

func (this exampleTimestampView) List(ctx context.Context, prefixKey ExampleTimestampIndexKey, opts ...ormlist.Option) (ExampleTimestampIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ExampleTimestampIterator{it}, err
}

func (this exampleTimestampView) ListRange(ctx context.Context, from, to ExampleTimestampIndexKey, opts ...ormlist.Option) (ExampleTimestampIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ExampleTimestampIterator{it}, err
}

func (this exampleTimestampTable) DeleteBy(ctx context.Context, prefixKey ExampleTimestampIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this exampleTimestampTable) DeleteRange(ctx context.Context, from, to ExampleTimestampIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this exampleTimestampView) doNotImplement()  {}
func (this exampleTimestampTable) doNotImplement() {}

var _ ExampleTimestampView = exampleTimestampView{}
var _ ExampleTimestampTable = exampleTimestampTable{}

func NewExampleTimestampView(db ormtable.Schema) (ExampleTimestampView, error) {
	view := db.GetTable(&ExampleTimestamp{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTimestamp{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTimestampView{view: view}, nil
}

func NewExampleTimestampTable(db ormtable.Schema) (ExampleTimestampTable, error) {
	table := db.GetTable(&ExampleTimestamp{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTimestamp{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTimestampTable{
		table:                table.(ormtable.AutoIncrementTable),
		exampleTimestampView: exampleTimestampView{view: table},
	}, nil
}

type SimpleExampleView interface {
	Has(ctx context.Context, name string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, name string) (*SimpleExample, error)
	HasByUnique(ctx context.Context, unique string) (found bool, err error)
	// GetByUnique returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByUnique(ctx context.Context, unique string) (*SimpleExample, error)
	List(ctx context.Context, prefixKey SimpleExampleIndexKey, opts ...ormlist.Option) (SimpleExampleIterator, error)
	ListRange(ctx context.Context, from, to SimpleExampleIndexKey, opts ...ormlist.Option) (SimpleExampleIterator, error)

	doNotImplement()
}

type SimpleExampleTable interface {
	SimpleExampleView
	Insert(ctx context.Context, simpleExample *SimpleExample) error
	Update(ctx context.Context, simpleExample *SimpleExample) error
	Save(ctx context.Context, simpleExample *SimpleExample) error
	Delete(ctx context.Context, simpleExample *SimpleExample) error
	DeleteBy(ctx context.Context, prefixKey SimpleExampleIndexKey) error
	DeleteRange(ctx context.Context, from, to SimpleExampleIndexKey) error

	doNotImplement()
}

type SimpleExampleIterator struct {
	ormtable.Iterator
}

func (i SimpleExampleIterator) Value() (*SimpleExample, error) {
	var simpleExample SimpleExample
	err := i.UnmarshalMessage(&simpleExample)
	return &simpleExample, err
}

type SimpleExampleIndexKey interface {
	id() uint32
	values() []interface{}
	simpleExampleIndexKey()
}

// primary key starting index..
type SimpleExamplePrimaryKey = SimpleExampleNameIndexKey

type SimpleExampleNameIndexKey struct {
	vs []interface{}
}

func (x SimpleExampleNameIndexKey) id() uint32             { return 0 }
func (x SimpleExampleNameIndexKey) values() []interface{}  { return x.vs }
func (x SimpleExampleNameIndexKey) simpleExampleIndexKey() {}

func (this SimpleExampleNameIndexKey) WithName(name string) SimpleExampleNameIndexKey {
	this.vs = []interface{}{name}
	return this
}

type SimpleExampleUniqueIndexKey struct {
	vs []interface{}
}

func (x SimpleExampleUniqueIndexKey) id() uint32             { return 1 }
func (x SimpleExampleUniqueIndexKey) values() []interface{}  { return x.vs }
func (x SimpleExampleUniqueIndexKey) simpleExampleIndexKey() {}

func (this SimpleExampleUniqueIndexKey) WithUnique(unique string) SimpleExampleUniqueIndexKey {
	this.vs = []interface{}{unique}
	return this
}

type simpleExampleView struct {
	view ormtable.View
}

type simpleExampleTable struct {
	simpleExampleView
	table ormtable.Table
}

func (this simpleExampleTable) Insert(ctx context.Context, simpleExample *SimpleExample) error {
	return this.table.Insert(ctx, simpleExample)
}

func (this simpleExampleTable) Update(ctx context.Context, simpleExample *SimpleExample) error {
	return this.table.Update(ctx, simpleExample)
}

func (this simpleExampleTable) Save(ctx context.Context, simpleExample *SimpleExample) error {
	return this.table.Save(ctx, simpleExample)
}

func (this simpleExampleTable) Delete(ctx context.Context, simpleExample *SimpleExample) error {
	return this.table.Delete(ctx, simpleExample)
}

func (this simpleExampleView) Has(ctx context.Context, name string) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, name)
}

func (this simpleExampleView) Get(ctx context.Context, name string) (*SimpleExample, error) {
	var simpleExample SimpleExample
	found, err := this.view.PrimaryKey().Get(ctx, &simpleExample, name)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &simpleExample, nil
}

func (this simpleExampleView) HasByUnique(ctx context.Context, unique string) (found bool, err error) {
	return this.view.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		unique,
	)
}

func (this simpleExampleView) GetByUnique(ctx context.Context, unique string) (*SimpleExample, error) {
	var simpleExample SimpleExample
	found, err := this.view.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &simpleExample,
		unique,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &simpleExample, nil
}

func (this simpleExampleView) List(ctx context.Context, prefixKey SimpleExampleIndexKey, opts ...ormlist.Option) (SimpleExampleIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return SimpleExampleIterator{it}, err
}

func (this simpleExampleView) ListRange(ctx context.Context, from, to SimpleExampleIndexKey, opts ...ormlist.Option) (SimpleExampleIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return SimpleExampleIterator{it}, err
}

func (this simpleExampleTable) DeleteBy(ctx context.Context, prefixKey SimpleExampleIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this simpleExampleTable) DeleteRange(ctx context.Context, from, to SimpleExampleIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this simpleExampleView) doNotImplement()  {}
func (this simpleExampleTable) doNotImplement() {}

var _ SimpleExampleView = simpleExampleView{}
var _ SimpleExampleTable = simpleExampleTable{}

func NewSimpleExampleView(db ormtable.Schema) (SimpleExampleView, error) {
	view := db.GetTable(&SimpleExample{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&SimpleExample{}).ProtoReflect().Descriptor().FullName()))
	}
	return simpleExampleView{view: view}, nil
}

func NewSimpleExampleTable(db ormtable.Schema) (SimpleExampleTable, error) {
	table := db.GetTable(&SimpleExample{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&SimpleExample{}).ProtoReflect().Descriptor().FullName()))
	}
	return simpleExampleTable{
		table:             table,
		simpleExampleView: simpleExampleView{view: table},
	}, nil
}

type ExampleAutoIncFieldNameView interface {
	Has(ctx context.Context, foo uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, foo uint64) (*ExampleAutoIncFieldName, error)
	List(ctx context.Context, prefixKey ExampleAutoIncFieldNameIndexKey, opts ...ormlist.Option) (ExampleAutoIncFieldNameIterator, error)
	ListRange(ctx context.Context, from, to ExampleAutoIncFieldNameIndexKey, opts ...ormlist.Option) (ExampleAutoIncFieldNameIterator, error)

	doNotImplement()
}

type ExampleAutoIncFieldNameTable interface {
	ExampleAutoIncFieldNameView
	Insert(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error
	InsertReturningFoo(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) (uint64, error)
	Update(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error
	Save(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error
	Delete(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error
	DeleteBy(ctx context.Context, prefixKey ExampleAutoIncFieldNameIndexKey) error
	DeleteRange(ctx context.Context, from, to ExampleAutoIncFieldNameIndexKey) error

	doNotImplement()
}

type ExampleAutoIncFieldNameIterator struct {
	ormtable.Iterator
}

func (i ExampleAutoIncFieldNameIterator) Value() (*ExampleAutoIncFieldName, error) {
	var exampleAutoIncFieldName ExampleAutoIncFieldName
	err := i.UnmarshalMessage(&exampleAutoIncFieldName)
	return &exampleAutoIncFieldName, err
}

type ExampleAutoIncFieldNameIndexKey interface {
	id() uint32
	values() []interface{}
	exampleAutoIncFieldNameIndexKey()
}

// primary key starting index..
type ExampleAutoIncFieldNamePrimaryKey = ExampleAutoIncFieldNameFooIndexKey

type ExampleAutoIncFieldNameFooIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncFieldNameFooIndexKey) id() uint32                       { return 0 }
func (x ExampleAutoIncFieldNameFooIndexKey) values() []interface{}            { return x.vs }
func (x ExampleAutoIncFieldNameFooIndexKey) exampleAutoIncFieldNameIndexKey() {}

func (this ExampleAutoIncFieldNameFooIndexKey) WithFoo(foo uint64) ExampleAutoIncFieldNameFooIndexKey {
	this.vs = []interface{}{foo}
	return this
}

type exampleAutoIncFieldNameView struct {
	view ormtable.View
}

type exampleAutoIncFieldNameTable struct {
	exampleAutoIncFieldNameView
	table ormtable.AutoIncrementTable
}

func (this exampleAutoIncFieldNameTable) Insert(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error {
	return this.table.Insert(ctx, exampleAutoIncFieldName)
}

func (this exampleAutoIncFieldNameTable) Update(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error {
	return this.table.Update(ctx, exampleAutoIncFieldName)
}

func (this exampleAutoIncFieldNameTable) Save(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error {
	return this.table.Save(ctx, exampleAutoIncFieldName)
}

func (this exampleAutoIncFieldNameTable) Delete(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) error {
	return this.table.Delete(ctx, exampleAutoIncFieldName)
}

func (this exampleAutoIncFieldNameTable) InsertReturningFoo(ctx context.Context, exampleAutoIncFieldName *ExampleAutoIncFieldName) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, exampleAutoIncFieldName)
}

func (this exampleAutoIncFieldNameView) Has(ctx context.Context, foo uint64) (found bool, err error) {
	return this.view.PrimaryKey().Has(ctx, foo)
}

func (this exampleAutoIncFieldNameView) Get(ctx context.Context, foo uint64) (*ExampleAutoIncFieldName, error) {
	var exampleAutoIncFieldName ExampleAutoIncFieldName
	found, err := this.view.PrimaryKey().Get(ctx, &exampleAutoIncFieldName, foo)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleAutoIncFieldName, nil
}

func (this exampleAutoIncFieldNameView) List(ctx context.Context, prefixKey ExampleAutoIncFieldNameIndexKey, opts ...ormlist.Option) (ExampleAutoIncFieldNameIterator, error) {
	it, err := this.view.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ExampleAutoIncFieldNameIterator{it}, err
}

func (this exampleAutoIncFieldNameView) ListRange(ctx context.Context, from, to ExampleAutoIncFieldNameIndexKey, opts ...ormlist.Option) (ExampleAutoIncFieldNameIterator, error) {
	it, err := this.view.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ExampleAutoIncFieldNameIterator{it}, err
}

func (this exampleAutoIncFieldNameTable) DeleteBy(ctx context.Context, prefixKey ExampleAutoIncFieldNameIndexKey) error {
	return this.view.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this exampleAutoIncFieldNameTable) DeleteRange(ctx context.Context, from, to ExampleAutoIncFieldNameIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this exampleAutoIncFieldNameView) doNotImplement()  {}
func (this exampleAutoIncFieldNameTable) doNotImplement() {}

var _ ExampleAutoIncFieldNameView = exampleAutoIncFieldNameView{}
var _ ExampleAutoIncFieldNameTable = exampleAutoIncFieldNameTable{}

func NewExampleAutoIncFieldNameView(db ormtable.Schema) (ExampleAutoIncFieldNameView, error) {
	view := db.GetTable(&ExampleAutoIncFieldName{})
	if view == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleAutoIncFieldName{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleAutoIncFieldNameView{view: view}, nil
}

func NewExampleAutoIncFieldNameTable(db ormtable.Schema) (ExampleAutoIncFieldNameTable, error) {
	table := db.GetTable(&ExampleAutoIncFieldName{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleAutoIncFieldName{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleAutoIncFieldNameTable{
		table:                       table.(ormtable.AutoIncrementTable),
		exampleAutoIncFieldNameView: exampleAutoIncFieldNameView{view: table},
	}, nil
}

type TestSchemaView interface {
	ExampleTableView() ExampleTableView
	ExampleAutoIncrementTableView() ExampleAutoIncrementTableView
	ExampleSingletonView() ExampleSingletonView
	ExampleTimestampView() ExampleTimestampView
	SimpleExampleView() SimpleExampleView
	ExampleAutoIncFieldNameView() ExampleAutoIncFieldNameView

	doNotImplement()
}

type TestSchemaStore interface {
	TestSchemaView
	ExampleTableTable() ExampleTableTable
	ExampleAutoIncrementTableTable() ExampleAutoIncrementTableTable
	ExampleSingletonTable() ExampleSingletonTable
	ExampleTimestampTable() ExampleTimestampTable
	SimpleExampleTable() SimpleExampleTable
	ExampleAutoIncFieldNameTable() ExampleAutoIncFieldNameTable

	doNotImplement()
}

type testSchemaView struct {
	exampleTable              ExampleTableView
	exampleAutoIncrementTable ExampleAutoIncrementTableView
	exampleSingleton          ExampleSingletonView
	exampleTimestamp          ExampleTimestampView
	simpleExample             SimpleExampleView
	exampleAutoIncFieldName   ExampleAutoIncFieldNameView
}
type testSchemaStore struct {
	testSchemaView
	exampleTable              ExampleTableTable
	exampleAutoIncrementTable ExampleAutoIncrementTableTable
	exampleSingleton          ExampleSingletonTable
	exampleTimestamp          ExampleTimestampTable
	simpleExample             SimpleExampleTable
	exampleAutoIncFieldName   ExampleAutoIncFieldNameTable
}

func (x testSchemaView) ExampleTableView() ExampleTableView {
	return x.exampleTable
}

func (x testSchemaView) ExampleAutoIncrementTableView() ExampleAutoIncrementTableView {
	return x.exampleAutoIncrementTable
}

func (x testSchemaView) ExampleSingletonView() ExampleSingletonView {
	return x.exampleSingleton
}

func (x testSchemaView) ExampleTimestampView() ExampleTimestampView {
	return x.exampleTimestamp
}

func (x testSchemaView) SimpleExampleView() SimpleExampleView {
	return x.simpleExample
}

func (x testSchemaView) ExampleAutoIncFieldNameView() ExampleAutoIncFieldNameView {
	return x.exampleAutoIncFieldName
}

func (testSchemaView) doNotImplement() {}

func (x testSchemaStore) ExampleTableTable() ExampleTableTable {
	return x.exampleTable
}

func (x testSchemaStore) ExampleAutoIncrementTableTable() ExampleAutoIncrementTableTable {
	return x.exampleAutoIncrementTable
}

func (x testSchemaStore) ExampleSingletonTable() ExampleSingletonTable {
	return x.exampleSingleton
}

func (x testSchemaStore) ExampleTimestampTable() ExampleTimestampTable {
	return x.exampleTimestamp
}

func (x testSchemaStore) SimpleExampleTable() SimpleExampleTable {
	return x.simpleExample
}

func (x testSchemaStore) ExampleAutoIncFieldNameTable() ExampleAutoIncFieldNameTable {
	return x.exampleAutoIncFieldName
}

func (testSchemaStore) doNotImplement() {}

var _ TestSchemaView = testSchemaView{}
var _ TestSchemaStore = testSchemaStore{}

func NewTestSchemaView(db ormtable.Schema) (TestSchemaView, error) {
	exampleTableView, err := NewExampleTableView(db)
	if err != nil {
		return nil, err
	}

	exampleAutoIncrementTableView, err := NewExampleAutoIncrementTableView(db)
	if err != nil {
		return nil, err
	}

	exampleSingletonView, err := NewExampleSingletonView(db)
	if err != nil {
		return nil, err
	}

	exampleTimestampView, err := NewExampleTimestampView(db)
	if err != nil {
		return nil, err
	}

	simpleExampleView, err := NewSimpleExampleView(db)
	if err != nil {
		return nil, err
	}

	exampleAutoIncFieldNameView, err := NewExampleAutoIncFieldNameView(db)
	if err != nil {
		return nil, err
	}

	return testSchemaView{
		exampleTableView,
		exampleAutoIncrementTableView,
		exampleSingletonView,
		exampleTimestampView,
		simpleExampleView,
		exampleAutoIncFieldNameView,
	}, nil
}

func NewTestSchemaStore(db ormtable.Schema) (TestSchemaStore, error) {
	exampleTableTable, err := NewExampleTableTable(db)
	if err != nil {
		return nil, err
	}

	exampleAutoIncrementTableTable, err := NewExampleAutoIncrementTableTable(db)
	if err != nil {
		return nil, err
	}

	exampleSingletonTable, err := NewExampleSingletonTable(db)
	if err != nil {
		return nil, err
	}

	exampleTimestampTable, err := NewExampleTimestampTable(db)
	if err != nil {
		return nil, err
	}

	simpleExampleTable, err := NewSimpleExampleTable(db)
	if err != nil {
		return nil, err
	}

	exampleAutoIncFieldNameTable, err := NewExampleAutoIncFieldNameTable(db)
	if err != nil {
		return nil, err
	}

	return testSchemaStore{
		testSchemaView{
			exampleTableTable,
			exampleAutoIncrementTableTable,
			exampleSingletonTable,
			exampleTimestampTable,
			simpleExampleTable,
			exampleAutoIncFieldNameTable,
		},
		exampleTableTable,
		exampleAutoIncrementTableTable,
		exampleSingletonTable,
		exampleTimestampTable,
		simpleExampleTable,
		exampleAutoIncFieldNameTable,
	}, nil
}
