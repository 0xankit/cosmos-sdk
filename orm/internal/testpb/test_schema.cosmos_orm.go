// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package testpb

import (
	context "context"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type ExampleTableTable interface {
	ormtable.GenericTable[*ExampleTable, ExampleTableIndexKey]
	Has(ctx context.Context, u32 uint32, i64 int64, str string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, u32 uint32, i64 int64, str string) (*ExampleTable, error)
	HasByU64Str(ctx context.Context, u64 uint64, str string) (found bool, err error)
	// GetByU64Str returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByU64Str(ctx context.Context, u64 uint64, str string) (*ExampleTable, error)

	doNotImplement()
}

type ExampleTableIterator struct {
	ormtable.Iterator
}

func (i ExampleTableIterator) Value() (*ExampleTable, error) {
	var exampleTable ExampleTable
	err := i.UnmarshalMessage(&exampleTable)
	return &exampleTable, err
}

type ExampleTableIndexKey interface {
	ormtable.GenericIndexKey
	exampleTableIndexKey()
}

// primary key starting index..
type ExampleTablePrimaryKey = ExampleTableU32I64StrIndexKey

type ExampleTableU32I64StrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableU32I64StrIndexKey) IndexId() uint32          { return 0 }
func (x ExampleTableU32I64StrIndexKey) KeyValues() []interface{} { return x.vs }
func (x ExampleTableU32I64StrIndexKey) exampleTableIndexKey()    {}

func (this ExampleTableU32I64StrIndexKey) WithU32(u32 uint32) ExampleTableU32I64StrIndexKey {
	this.vs = []interface{}{u32}
	return this
}

func (this ExampleTableU32I64StrIndexKey) WithU32I64(u32 uint32, i64 int64) ExampleTableU32I64StrIndexKey {
	this.vs = []interface{}{u32, i64}
	return this
}

func (this ExampleTableU32I64StrIndexKey) WithU32I64Str(u32 uint32, i64 int64, str string) ExampleTableU32I64StrIndexKey {
	this.vs = []interface{}{u32, i64, str}
	return this
}

type ExampleTableU64StrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableU64StrIndexKey) IndexId() uint32          { return 1 }
func (x ExampleTableU64StrIndexKey) KeyValues() []interface{} { return x.vs }
func (x ExampleTableU64StrIndexKey) exampleTableIndexKey()    {}

func (this ExampleTableU64StrIndexKey) WithU64(u64 uint64) ExampleTableU64StrIndexKey {
	this.vs = []interface{}{u64}
	return this
}

func (this ExampleTableU64StrIndexKey) WithU64Str(u64 uint64, str string) ExampleTableU64StrIndexKey {
	this.vs = []interface{}{u64, str}
	return this
}

type ExampleTableStrU32IndexKey struct {
	vs []interface{}
}

func (x ExampleTableStrU32IndexKey) IndexId() uint32          { return 2 }
func (x ExampleTableStrU32IndexKey) KeyValues() []interface{} { return x.vs }
func (x ExampleTableStrU32IndexKey) exampleTableIndexKey()    {}

func (this ExampleTableStrU32IndexKey) WithStr(str string) ExampleTableStrU32IndexKey {
	this.vs = []interface{}{str}
	return this
}

func (this ExampleTableStrU32IndexKey) WithStrU32(str string, u32 uint32) ExampleTableStrU32IndexKey {
	this.vs = []interface{}{str, u32}
	return this
}

type ExampleTableBzStrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableBzStrIndexKey) IndexId() uint32          { return 3 }
func (x ExampleTableBzStrIndexKey) KeyValues() []interface{} { return x.vs }
func (x ExampleTableBzStrIndexKey) exampleTableIndexKey()    {}

func (this ExampleTableBzStrIndexKey) WithBz(bz []byte) ExampleTableBzStrIndexKey {
	this.vs = []interface{}{bz}
	return this
}

func (this ExampleTableBzStrIndexKey) WithBzStr(bz []byte, str string) ExampleTableBzStrIndexKey {
	this.vs = []interface{}{bz, str}
	return this
}

type exampleTableTable struct {
	ormtable.GenericTable[*ExampleTable, ExampleTableIndexKey]
}

func (this exampleTableTable) Has(ctx context.Context, u32 uint32, i64 int64, str string) (found bool, err error) {
	return this.DynamicTable().PrimaryKey().Has(ctx, u32, i64, str)
}

func (this exampleTableTable) Get(ctx context.Context, u32 uint32, i64 int64, str string) (*ExampleTable, error) {
	var exampleTable ExampleTable
	found, err := this.DynamicTable().PrimaryKey().Get(ctx, &exampleTable, u32, i64, str)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleTable, nil
}

func (this exampleTableTable) HasByU64Str(ctx context.Context, u64 uint64, str string) (found bool, err error) {
	return this.DynamicTable().GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		u64,
		str,
	)
}

func (this exampleTableTable) GetByU64Str(ctx context.Context, u64 uint64, str string) (*ExampleTable, error) {
	var exampleTable ExampleTable
	found, err := this.DynamicTable().GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &exampleTable,
		u64,
		str,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleTable, nil
}

func (this exampleTableTable) doNotImplement() {}

var _ ExampleTableTable = exampleTableTable{}

func NewExampleTableTable(db ormtable.Schema) (ExampleTableTable, error) {
	table := db.GetTable(&ExampleTable{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTableTable{ormtable.NewGenericTable[*ExampleTable, ExampleTableIndexKey](table)}, nil
}

type ExampleAutoIncrementTableTable interface {
	ormtable.GenericAutoIncrementTable[*ExampleAutoIncrementTable, ExampleAutoIncrementTableIndexKey]
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*ExampleAutoIncrementTable, error)
	HasByX(ctx context.Context, x string) (found bool, err error)
	// GetByX returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByX(ctx context.Context, x string) (*ExampleAutoIncrementTable, error)

	doNotImplement()
}

type ExampleAutoIncrementTableIterator struct {
	ormtable.Iterator
}

func (i ExampleAutoIncrementTableIterator) Value() (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	err := i.UnmarshalMessage(&exampleAutoIncrementTable)
	return &exampleAutoIncrementTable, err
}

type ExampleAutoIncrementTableIndexKey interface {
	ormtable.GenericIndexKey
	exampleAutoIncrementTableIndexKey()
}

// primary key starting index..
type ExampleAutoIncrementTablePrimaryKey = ExampleAutoIncrementTableIdIndexKey

type ExampleAutoIncrementTableIdIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncrementTableIdIndexKey) IndexId() uint32                    { return 0 }
func (x ExampleAutoIncrementTableIdIndexKey) KeyValues() []interface{}           { return x.vs }
func (x ExampleAutoIncrementTableIdIndexKey) exampleAutoIncrementTableIndexKey() {}

func (this ExampleAutoIncrementTableIdIndexKey) WithId(id uint64) ExampleAutoIncrementTableIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ExampleAutoIncrementTableXIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncrementTableXIndexKey) IndexId() uint32                    { return 1 }
func (x ExampleAutoIncrementTableXIndexKey) KeyValues() []interface{}           { return x.vs }
func (x ExampleAutoIncrementTableXIndexKey) exampleAutoIncrementTableIndexKey() {}

func (this ExampleAutoIncrementTableXIndexKey) WithX(x string) ExampleAutoIncrementTableXIndexKey {
	this.vs = []interface{}{x}
	return this
}

type exampleAutoIncrementTableTable struct {
	ormtable.GenericAutoIncrementTable[*ExampleAutoIncrementTable, ExampleAutoIncrementTableIndexKey]
}

func (this exampleAutoIncrementTableTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.DynamicTable().PrimaryKey().Has(ctx, id)
}

func (this exampleAutoIncrementTableTable) Get(ctx context.Context, id uint64) (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	found, err := this.DynamicTable().PrimaryKey().Get(ctx, &exampleAutoIncrementTable, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleAutoIncrementTable, nil
}

func (this exampleAutoIncrementTableTable) HasByX(ctx context.Context, x string) (found bool, err error) {
	return this.DynamicTable().GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		x,
	)
}

func (this exampleAutoIncrementTableTable) GetByX(ctx context.Context, x string) (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	found, err := this.DynamicTable().GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &exampleAutoIncrementTable,
		x,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleAutoIncrementTable, nil
}

func (this exampleAutoIncrementTableTable) doNotImplement() {}

var _ ExampleAutoIncrementTableTable = exampleAutoIncrementTableTable{}

func NewExampleAutoIncrementTableTable(db ormtable.Schema) (ExampleAutoIncrementTableTable, error) {
	table := db.GetTable(&ExampleAutoIncrementTable{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleAutoIncrementTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleAutoIncrementTableTable{ormtable.NewGenericAutoIncrementTable[*ExampleAutoIncrementTable, ExampleAutoIncrementTableIndexKey](table.(ormtable.AutoIncrementTable))}, nil
}

// singleton store
type ExampleSingletonTable interface {
	Get(ctx context.Context) (*ExampleSingleton, error)
	Save(ctx context.Context, exampleSingleton *ExampleSingleton) error
}

type exampleSingletonTable struct {
	table ormtable.Table
}

var _ ExampleSingletonTable = exampleSingletonTable{}

func (x exampleSingletonTable) Get(ctx context.Context) (*ExampleSingleton, error) {
	exampleSingleton := &ExampleSingleton{}
	_, err := x.table.Get(ctx, exampleSingleton)
	return exampleSingleton, err
}

func (x exampleSingletonTable) Save(ctx context.Context, exampleSingleton *ExampleSingleton) error {
	return x.table.Save(ctx, exampleSingleton)
}

func NewExampleSingletonTable(db ormtable.Schema) (ExampleSingletonTable, error) {
	table := db.GetTable(&ExampleSingleton{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleSingleton{}).ProtoReflect().Descriptor().FullName()))
	}
	return &exampleSingletonTable{table}, nil
}

type ExampleTimestampTable interface {
	ormtable.GenericAutoIncrementTable[*ExampleTimestamp, ExampleTimestampIndexKey]
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*ExampleTimestamp, error)

	doNotImplement()
}

type ExampleTimestampIterator struct {
	ormtable.Iterator
}

func (i ExampleTimestampIterator) Value() (*ExampleTimestamp, error) {
	var exampleTimestamp ExampleTimestamp
	err := i.UnmarshalMessage(&exampleTimestamp)
	return &exampleTimestamp, err
}

type ExampleTimestampIndexKey interface {
	ormtable.GenericIndexKey
	exampleTimestampIndexKey()
}

// primary key starting index..
type ExampleTimestampPrimaryKey = ExampleTimestampIdIndexKey

type ExampleTimestampIdIndexKey struct {
	vs []interface{}
}

func (x ExampleTimestampIdIndexKey) IndexId() uint32           { return 0 }
func (x ExampleTimestampIdIndexKey) KeyValues() []interface{}  { return x.vs }
func (x ExampleTimestampIdIndexKey) exampleTimestampIndexKey() {}

func (this ExampleTimestampIdIndexKey) WithId(id uint64) ExampleTimestampIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ExampleTimestampTsIndexKey struct {
	vs []interface{}
}

func (x ExampleTimestampTsIndexKey) IndexId() uint32           { return 1 }
func (x ExampleTimestampTsIndexKey) KeyValues() []interface{}  { return x.vs }
func (x ExampleTimestampTsIndexKey) exampleTimestampIndexKey() {}

func (this ExampleTimestampTsIndexKey) WithTs(ts *timestamppb.Timestamp) ExampleTimestampTsIndexKey {
	this.vs = []interface{}{ts}
	return this
}

type exampleTimestampTable struct {
	ormtable.GenericAutoIncrementTable[*ExampleTimestamp, ExampleTimestampIndexKey]
}

func (this exampleTimestampTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.DynamicTable().PrimaryKey().Has(ctx, id)
}

func (this exampleTimestampTable) Get(ctx context.Context, id uint64) (*ExampleTimestamp, error) {
	var exampleTimestamp ExampleTimestamp
	found, err := this.DynamicTable().PrimaryKey().Get(ctx, &exampleTimestamp, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &exampleTimestamp, nil
}

func (this exampleTimestampTable) doNotImplement() {}

var _ ExampleTimestampTable = exampleTimestampTable{}

func NewExampleTimestampTable(db ormtable.Schema) (ExampleTimestampTable, error) {
	table := db.GetTable(&ExampleTimestamp{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTimestamp{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTimestampTable{ormtable.NewGenericAutoIncrementTable[*ExampleTimestamp, ExampleTimestampIndexKey](table.(ormtable.AutoIncrementTable))}, nil
}

type TestSchemaStore interface {
	ExampleTableTable() ExampleTableTable
	ExampleAutoIncrementTableTable() ExampleAutoIncrementTableTable
	ExampleSingletonTable() ExampleSingletonTable
	ExampleTimestampTable() ExampleTimestampTable

	doNotImplement()
}

type testSchemaStore struct {
	exampleTable              ExampleTableTable
	exampleAutoIncrementTable ExampleAutoIncrementTableTable
	exampleSingleton          ExampleSingletonTable
	exampleTimestamp          ExampleTimestampTable
}

func (x testSchemaStore) ExampleTableTable() ExampleTableTable {
	return x.exampleTable
}

func (x testSchemaStore) ExampleAutoIncrementTableTable() ExampleAutoIncrementTableTable {
	return x.exampleAutoIncrementTable
}

func (x testSchemaStore) ExampleSingletonTable() ExampleSingletonTable {
	return x.exampleSingleton
}

func (x testSchemaStore) ExampleTimestampTable() ExampleTimestampTable {
	return x.exampleTimestamp
}

func (testSchemaStore) doNotImplement() {}

var _ TestSchemaStore = testSchemaStore{}

func NewTestSchemaStore(db ormtable.Schema) (TestSchemaStore, error) {
	exampleTableTable, err := NewExampleTableTable(db)
	if err != nil {
		return nil, err
	}

	exampleAutoIncrementTableTable, err := NewExampleAutoIncrementTableTable(db)
	if err != nil {
		return nil, err
	}

	exampleSingletonTable, err := NewExampleSingletonTable(db)
	if err != nil {
		return nil, err
	}

	exampleTimestampTable, err := NewExampleTimestampTable(db)
	if err != nil {
		return nil, err
	}

	return testSchemaStore{
		exampleTableTable,
		exampleAutoIncrementTableTable,
		exampleSingletonTable,
		exampleTimestampTable,
	}, nil
}
