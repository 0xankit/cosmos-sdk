// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/orm/v1alpha1/schema.proto

package ormv1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SchemaDescriptor describes an ORM schema that contains all the information
// needed for a dynamic client to decode the stored data.
type SchemaDescriptor struct {
	// files is the set of all FileDescriptorProto's needed to decode the stored data.
	// A schema imposes the constraint that every file and every table within that
	// schema have at most one instance in the store.
	Files *descriptorpb.FileDescriptorSet `protobuf:"bytes,1,opt,name=files,proto3" json:"files,omitempty"`
	// modules is the set of modules in the schema.
	Modules []*SchemaDescriptor_ModuleEntry `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (m *SchemaDescriptor) Reset()         { *m = SchemaDescriptor{} }
func (m *SchemaDescriptor) String() string { return proto.CompactTextString(m) }
func (*SchemaDescriptor) ProtoMessage()    {}
func (*SchemaDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c1a84cca236c22, []int{0}
}
func (m *SchemaDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaDescriptor.Merge(m, src)
}
func (m *SchemaDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *SchemaDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaDescriptor proto.InternalMessageInfo

func (m *SchemaDescriptor) GetFiles() *descriptorpb.FileDescriptorSet {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *SchemaDescriptor) GetModules() []*SchemaDescriptor_ModuleEntry {
	if m != nil {
		return m.Modules
	}
	return nil
}

// ModuleEntry describes a single module's schema.
type SchemaDescriptor_ModuleEntry struct {
	// name is the name of the module. In the multi-store model this name is
	// used to locate the module's store.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// prefix is an optional prefix that precedes all keys in this module's
	// store.
	Prefix []byte `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// files describes the schema files used in this module.
	Files []*SchemaDescriptor_FileEntry `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *SchemaDescriptor_ModuleEntry) Reset()         { *m = SchemaDescriptor_ModuleEntry{} }
func (m *SchemaDescriptor_ModuleEntry) String() string { return proto.CompactTextString(m) }
func (*SchemaDescriptor_ModuleEntry) ProtoMessage()    {}
func (*SchemaDescriptor_ModuleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c1a84cca236c22, []int{0, 0}
}
func (m *SchemaDescriptor_ModuleEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaDescriptor_ModuleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaDescriptor_ModuleEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaDescriptor_ModuleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaDescriptor_ModuleEntry.Merge(m, src)
}
func (m *SchemaDescriptor_ModuleEntry) XXX_Size() int {
	return m.Size()
}
func (m *SchemaDescriptor_ModuleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaDescriptor_ModuleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaDescriptor_ModuleEntry proto.InternalMessageInfo

func (m *SchemaDescriptor_ModuleEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SchemaDescriptor_ModuleEntry) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SchemaDescriptor_ModuleEntry) GetFiles() []*SchemaDescriptor_FileEntry {
	if m != nil {
		return m.Files
	}
	return nil
}

// FileEntry describes an ORM file used in a module.
type SchemaDescriptor_FileEntry struct {
	// id is a prefix that will be varint encoded and prepended to all the
	// table keys specified in the file's tables.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// file_name is the name of a file in the FileDescriptor set that contains
	// table definitions.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (m *SchemaDescriptor_FileEntry) Reset()         { *m = SchemaDescriptor_FileEntry{} }
func (m *SchemaDescriptor_FileEntry) String() string { return proto.CompactTextString(m) }
func (*SchemaDescriptor_FileEntry) ProtoMessage()    {}
func (*SchemaDescriptor_FileEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c1a84cca236c22, []int{0, 1}
}
func (m *SchemaDescriptor_FileEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaDescriptor_FileEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaDescriptor_FileEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaDescriptor_FileEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaDescriptor_FileEntry.Merge(m, src)
}
func (m *SchemaDescriptor_FileEntry) XXX_Size() int {
	return m.Size()
}
func (m *SchemaDescriptor_FileEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaDescriptor_FileEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaDescriptor_FileEntry proto.InternalMessageInfo

func (m *SchemaDescriptor_FileEntry) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SchemaDescriptor_FileEntry) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func init() {
	proto.RegisterType((*SchemaDescriptor)(nil), "cosmos.orm.v1alpha1.SchemaDescriptor")
	proto.RegisterType((*SchemaDescriptor_ModuleEntry)(nil), "cosmos.orm.v1alpha1.SchemaDescriptor.ModuleEntry")
	proto.RegisterType((*SchemaDescriptor_FileEntry)(nil), "cosmos.orm.v1alpha1.SchemaDescriptor.FileEntry")
}

func init() { proto.RegisterFile("cosmos/orm/v1alpha1/schema.proto", fileDescriptor_b5c1a84cca236c22) }

var fileDescriptor_b5c1a84cca236c22 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xb1, 0x8e, 0xd3, 0x30,
	0x18, 0xc7, 0x6b, 0x17, 0x0e, 0xea, 0x00, 0x42, 0x3e, 0x01, 0xa7, 0x22, 0x85, 0xe8, 0xa6, 0x2e,
	0xd8, 0xea, 0xb1, 0x9c, 0xc2, 0xd6, 0xe3, 0x60, 0x80, 0x23, 0x55, 0x4e, 0x42, 0x08, 0x55, 0x42,
	0x6e, 0xe2, 0xb6, 0x16, 0xf1, 0x39, 0x72, 0x5c, 0x44, 0x37, 0x1e, 0x81, 0x67, 0x60, 0xe4, 0x49,
	0x10, 0x53, 0x27, 0xc4, 0x88, 0xd2, 0x8d, 0x47, 0x60, 0x42, 0xb1, 0xeb, 0x82, 0x50, 0x86, 0x9b,
	0xe2, 0xfc, 0xbf, 0xff, 0xff, 0xfb, 0x7e, 0x4e, 0x3e, 0x14, 0x65, 0xaa, 0x92, 0xaa, 0xa2, 0x4a,
	0x4b, 0xfa, 0x7e, 0xc8, 0x8a, 0x72, 0xc1, 0x86, 0xb4, 0xca, 0x16, 0x5c, 0x32, 0x52, 0x6a, 0x65,
	0x14, 0xde, 0x77, 0x0e, 0xa2, 0xb4, 0x24, 0xde, 0xd1, 0x8f, 0xe6, 0x4a, 0xcd, 0x0b, 0x4e, 0xad,
	0x65, 0xba, 0x9c, 0xd1, 0x9c, 0x57, 0x99, 0x16, 0xa5, 0x51, 0xda, 0xc5, 0x0e, 0xbf, 0x43, 0x74,
	0xfb, 0xdc, 0xf6, 0x79, 0xb2, 0x2b, 0xe1, 0x63, 0x74, 0x75, 0x26, 0x0a, 0x5e, 0x1d, 0x80, 0x08,
	0x0c, 0x82, 0xa3, 0x43, 0xe2, 0xda, 0x10, 0xdf, 0x86, 0x3c, 0x15, 0x05, 0xff, 0xeb, 0x3f, 0xe7,
	0x26, 0x75, 0x01, 0xfc, 0x1c, 0x5d, 0x93, 0x2a, 0x5f, 0x36, 0x59, 0x18, 0x75, 0x07, 0xc1, 0xd1,
	0x90, 0xb4, 0x70, 0x91, 0xff, 0x27, 0x92, 0x33, 0x1b, 0x3a, 0xbd, 0x30, 0x7a, 0x95, 0xfa, 0x0e,
	0xfd, 0x8f, 0x00, 0x05, 0xff, 0x14, 0x30, 0x46, 0x57, 0x2e, 0x98, 0xe4, 0x96, 0xaa, 0x97, 0xda,
	0x33, 0xbe, 0x8b, 0xf6, 0x4a, 0xcd, 0x67, 0xe2, 0xc3, 0x01, 0x8c, 0xc0, 0xe0, 0x46, 0xba, 0x7d,
	0xc3, 0xa7, 0xfe, 0x0a, 0x5d, 0x8b, 0x41, 0x2f, 0x87, 0xd1, 0xdc, 0xcb, 0x41, 0xb8, 0x74, 0xff,
	0x18, 0xf5, 0x76, 0x1a, 0xbe, 0x85, 0xa0, 0xc8, 0xed, 0xf4, 0x9b, 0x29, 0x14, 0x39, 0xbe, 0x8f,
	0x7a, 0x8d, 0xeb, 0xad, 0x85, 0x82, 0x16, 0xea, 0x7a, 0x23, 0xbc, 0x64, 0x92, 0x8f, 0x7e, 0x83,
	0xaf, 0x75, 0x08, 0xd6, 0x75, 0x08, 0x7e, 0xd6, 0x21, 0xf8, 0xb4, 0x09, 0x3b, 0xeb, 0x4d, 0xd8,
	0xf9, 0xb1, 0x09, 0x3b, 0xe8, 0x5e, 0xa6, 0x64, 0x1b, 0xcf, 0x28, 0x70, 0x40, 0xe3, 0xe6, 0x33,
	0x8f, 0xc1, 0x9b, 0x17, 0x73, 0x61, 0x16, 0xcb, 0x29, 0xc9, 0x94, 0xa4, 0xdb, 0xff, 0xef, 0x1e,
	0x0f, 0xab, 0xfc, 0x1d, 0x35, 0xab, 0x92, 0x57, 0x94, 0x95, 0x22, 0x53, 0xb2, 0x64, 0x86, 0xb6,
	0x6c, 0xc8, 0x63, 0xa5, 0xa5, 0x3f, 0x7f, 0x86, 0xdd, 0x93, 0xe4, 0xf5, 0x17, 0xb8, 0x7f, 0xe2,
	0x06, 0x27, 0x5a, 0x92, 0x57, 0xdb, 0xda, 0x37, 0xaf, 0x4e, 0x12, 0x2d, 0x27, 0x5e, 0xad, 0xe1,
	0x83, 0x16, 0x75, 0xf2, 0x6c, 0x3c, 0x3a, 0xe3, 0x86, 0xe5, 0xcc, 0xb0, 0x5f, 0xf0, 0x8e, 0x73,
	0xc4, 0x71, 0xa2, 0x65, 0x1c, 0x7b, 0xcf, 0x74, 0xcf, 0x6e, 0xca, 0xa3, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x99, 0xe1, 0xa9, 0x7a, 0xb7, 0x02, 0x00, 0x00,
}

func (m *SchemaDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Files != nil {
		{
			size, err := m.Files.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaDescriptor_ModuleEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaDescriptor_ModuleEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaDescriptor_ModuleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaDescriptor_FileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaDescriptor_FileEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaDescriptor_FileEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SchemaDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Files != nil {
		l = m.Files.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *SchemaDescriptor_ModuleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *SchemaDescriptor_FileEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchema(uint64(m.Id))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}

func sovSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchema(x uint64) (n int) {
	return sovSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SchemaDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = &descriptorpb.FileDescriptorSet{}
			}
			if err := m.Files.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &SchemaDescriptor_ModuleEntry{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaDescriptor_ModuleEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &SchemaDescriptor_FileEntry{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaDescriptor_FileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchema = fmt.Errorf("proto: unexpected end of group")
)
